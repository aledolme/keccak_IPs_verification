// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module power_manager_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 9
) (
    input logic clk_i,
    input logic rst_ni,
    input reg_req_t reg_req_i,
    output reg_rsp_t reg_rsp_o,
    // To HW
    output power_manager_reg_pkg::power_manager_reg2hw_t reg2hw,  // Write
    input power_manager_reg_pkg::power_manager_hw2reg_t hw2reg,  // Read


    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);

  import power_manager_reg_pkg::*;

  localparam int DW = 32;
  localparam int DBW = DW / 8;  // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [ AW-1:0] reg_addr;
  logic [ DW-1:0] reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [ DW-1:0] reg_rdata;
  logic           reg_error;

  logic addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic wakeup_state_qs;
  logic wakeup_state_wd;
  logic wakeup_state_we;
  logic [31:0] restore_address_qs;
  logic [31:0] restore_address_wd;
  logic restore_address_we;
  logic [31:0] en_wait_for_intr_qs;
  logic [31:0] en_wait_for_intr_wd;
  logic en_wait_for_intr_we;
  logic [31:0] intr_state_qs;
  logic [31:0] intr_state_wd;
  logic intr_state_we;
  logic power_gate_core_qs;
  logic power_gate_core_wd;
  logic power_gate_core_we;
  logic power_gate_core_ack_qs;
  logic [31:0] cpu_reset_assert_counter_qs;
  logic [31:0] cpu_reset_assert_counter_wd;
  logic cpu_reset_assert_counter_we;
  logic [31:0] cpu_reset_deassert_counter_qs;
  logic [31:0] cpu_reset_deassert_counter_wd;
  logic cpu_reset_deassert_counter_we;
  logic [31:0] cpu_switch_off_counter_qs;
  logic [31:0] cpu_switch_off_counter_wd;
  logic cpu_switch_off_counter_we;
  logic [31:0] cpu_switch_on_counter_qs;
  logic [31:0] cpu_switch_on_counter_wd;
  logic cpu_switch_on_counter_we;
  logic cpu_wait_ack_switch_on_counter_qs;
  logic cpu_wait_ack_switch_on_counter_wd;
  logic cpu_wait_ack_switch_on_counter_we;
  logic [31:0] cpu_iso_off_counter_qs;
  logic [31:0] cpu_iso_off_counter_wd;
  logic cpu_iso_off_counter_we;
  logic [31:0] cpu_iso_on_counter_qs;
  logic [31:0] cpu_iso_on_counter_wd;
  logic cpu_iso_on_counter_we;
  logic cpu_counters_stop_cpu_reset_assert_stop_bit_counter_qs;
  logic cpu_counters_stop_cpu_reset_assert_stop_bit_counter_wd;
  logic cpu_counters_stop_cpu_reset_assert_stop_bit_counter_we;
  logic cpu_counters_stop_cpu_reset_deassert_stop_bit_counter_qs;
  logic cpu_counters_stop_cpu_reset_deassert_stop_bit_counter_wd;
  logic cpu_counters_stop_cpu_reset_deassert_stop_bit_counter_we;
  logic cpu_counters_stop_cpu_switch_off_stop_bit_counter_qs;
  logic cpu_counters_stop_cpu_switch_off_stop_bit_counter_wd;
  logic cpu_counters_stop_cpu_switch_off_stop_bit_counter_we;
  logic cpu_counters_stop_cpu_switch_on_stop_bit_counter_qs;
  logic cpu_counters_stop_cpu_switch_on_stop_bit_counter_wd;
  logic cpu_counters_stop_cpu_switch_on_stop_bit_counter_we;
  logic cpu_counters_stop_cpu_iso_off_stop_bit_counter_qs;
  logic cpu_counters_stop_cpu_iso_off_stop_bit_counter_wd;
  logic cpu_counters_stop_cpu_iso_off_stop_bit_counter_we;
  logic cpu_counters_stop_cpu_iso_on_stop_bit_counter_qs;
  logic cpu_counters_stop_cpu_iso_on_stop_bit_counter_wd;
  logic cpu_counters_stop_cpu_iso_on_stop_bit_counter_we;
  logic power_gate_periph_ack_qs;
  logic periph_reset_qs;
  logic periph_reset_wd;
  logic periph_reset_we;
  logic periph_switch_qs;
  logic periph_switch_wd;
  logic periph_switch_we;
  logic periph_wait_ack_switch_on_qs;
  logic periph_wait_ack_switch_on_wd;
  logic periph_wait_ack_switch_on_we;
  logic periph_iso_qs;
  logic periph_iso_wd;
  logic periph_iso_we;
  logic periph_clk_gate_qs;
  logic periph_clk_gate_wd;
  logic periph_clk_gate_we;
  logic ram_0_clk_gate_qs;
  logic ram_0_clk_gate_wd;
  logic ram_0_clk_gate_we;
  logic power_gate_ram_block_0_ack_qs;
  logic ram_0_switch_qs;
  logic ram_0_switch_wd;
  logic ram_0_switch_we;
  logic ram_0_wait_ack_switch_on_qs;
  logic ram_0_wait_ack_switch_on_wd;
  logic ram_0_wait_ack_switch_on_we;
  logic ram_0_iso_qs;
  logic ram_0_iso_wd;
  logic ram_0_iso_we;
  logic ram_0_retentive_qs;
  logic ram_0_retentive_wd;
  logic ram_0_retentive_we;
  logic ram_1_clk_gate_qs;
  logic ram_1_clk_gate_wd;
  logic ram_1_clk_gate_we;
  logic power_gate_ram_block_1_ack_qs;
  logic ram_1_switch_qs;
  logic ram_1_switch_wd;
  logic ram_1_switch_we;
  logic ram_1_wait_ack_switch_on_qs;
  logic ram_1_wait_ack_switch_on_wd;
  logic ram_1_wait_ack_switch_on_we;
  logic ram_1_iso_qs;
  logic ram_1_iso_wd;
  logic ram_1_iso_we;
  logic ram_1_retentive_qs;
  logic ram_1_retentive_wd;
  logic ram_1_retentive_we;
  logic ram_2_clk_gate_qs;
  logic ram_2_clk_gate_wd;
  logic ram_2_clk_gate_we;
  logic power_gate_ram_block_2_ack_qs;
  logic ram_2_switch_qs;
  logic ram_2_switch_wd;
  logic ram_2_switch_we;
  logic ram_2_wait_ack_switch_on_qs;
  logic ram_2_wait_ack_switch_on_wd;
  logic ram_2_wait_ack_switch_on_we;
  logic ram_2_iso_qs;
  logic ram_2_iso_wd;
  logic ram_2_iso_we;
  logic ram_2_retentive_qs;
  logic ram_2_retentive_wd;
  logic ram_2_retentive_we;
  logic ram_3_clk_gate_qs;
  logic ram_3_clk_gate_wd;
  logic ram_3_clk_gate_we;
  logic power_gate_ram_block_3_ack_qs;
  logic ram_3_switch_qs;
  logic ram_3_switch_wd;
  logic ram_3_switch_we;
  logic ram_3_wait_ack_switch_on_qs;
  logic ram_3_wait_ack_switch_on_wd;
  logic ram_3_wait_ack_switch_on_we;
  logic ram_3_iso_qs;
  logic ram_3_iso_wd;
  logic ram_3_iso_we;
  logic ram_3_retentive_qs;
  logic ram_3_retentive_wd;
  logic ram_3_retentive_we;
  logic ram_4_clk_gate_qs;
  logic ram_4_clk_gate_wd;
  logic ram_4_clk_gate_we;
  logic power_gate_ram_block_4_ack_qs;
  logic ram_4_switch_qs;
  logic ram_4_switch_wd;
  logic ram_4_switch_we;
  logic ram_4_wait_ack_switch_on_qs;
  logic ram_4_wait_ack_switch_on_wd;
  logic ram_4_wait_ack_switch_on_we;
  logic ram_4_iso_qs;
  logic ram_4_iso_wd;
  logic ram_4_iso_we;
  logic ram_4_retentive_qs;
  logic ram_4_retentive_wd;
  logic ram_4_retentive_we;
  logic ram_5_clk_gate_qs;
  logic ram_5_clk_gate_wd;
  logic ram_5_clk_gate_we;
  logic power_gate_ram_block_5_ack_qs;
  logic ram_5_switch_qs;
  logic ram_5_switch_wd;
  logic ram_5_switch_we;
  logic ram_5_wait_ack_switch_on_qs;
  logic ram_5_wait_ack_switch_on_wd;
  logic ram_5_wait_ack_switch_on_we;
  logic ram_5_iso_qs;
  logic ram_5_iso_wd;
  logic ram_5_iso_we;
  logic ram_5_retentive_qs;
  logic ram_5_retentive_wd;
  logic ram_5_retentive_we;
  logic ram_6_clk_gate_qs;
  logic ram_6_clk_gate_wd;
  logic ram_6_clk_gate_we;
  logic power_gate_ram_block_6_ack_qs;
  logic ram_6_switch_qs;
  logic ram_6_switch_wd;
  logic ram_6_switch_we;
  logic ram_6_wait_ack_switch_on_qs;
  logic ram_6_wait_ack_switch_on_wd;
  logic ram_6_wait_ack_switch_on_we;
  logic ram_6_iso_qs;
  logic ram_6_iso_wd;
  logic ram_6_iso_we;
  logic ram_6_retentive_qs;
  logic ram_6_retentive_wd;
  logic ram_6_retentive_we;
  logic ram_7_clk_gate_qs;
  logic ram_7_clk_gate_wd;
  logic ram_7_clk_gate_we;
  logic power_gate_ram_block_7_ack_qs;
  logic ram_7_switch_qs;
  logic ram_7_switch_wd;
  logic ram_7_switch_we;
  logic ram_7_wait_ack_switch_on_qs;
  logic ram_7_wait_ack_switch_on_wd;
  logic ram_7_wait_ack_switch_on_we;
  logic ram_7_iso_qs;
  logic ram_7_iso_wd;
  logic ram_7_iso_we;
  logic ram_7_retentive_qs;
  logic ram_7_retentive_wd;
  logic ram_7_retentive_we;
  logic ram_8_clk_gate_qs;
  logic ram_8_clk_gate_wd;
  logic ram_8_clk_gate_we;
  logic power_gate_ram_block_8_ack_qs;
  logic ram_8_switch_qs;
  logic ram_8_switch_wd;
  logic ram_8_switch_we;
  logic ram_8_wait_ack_switch_on_qs;
  logic ram_8_wait_ack_switch_on_wd;
  logic ram_8_wait_ack_switch_on_we;
  logic ram_8_iso_qs;
  logic ram_8_iso_wd;
  logic ram_8_iso_we;
  logic ram_8_retentive_qs;
  logic ram_8_retentive_wd;
  logic ram_8_retentive_we;
  logic ram_9_clk_gate_qs;
  logic ram_9_clk_gate_wd;
  logic ram_9_clk_gate_we;
  logic power_gate_ram_block_9_ack_qs;
  logic ram_9_switch_qs;
  logic ram_9_switch_wd;
  logic ram_9_switch_we;
  logic ram_9_wait_ack_switch_on_qs;
  logic ram_9_wait_ack_switch_on_wd;
  logic ram_9_wait_ack_switch_on_we;
  logic ram_9_iso_qs;
  logic ram_9_iso_wd;
  logic ram_9_iso_we;
  logic ram_9_retentive_qs;
  logic ram_9_retentive_wd;
  logic ram_9_retentive_we;
  logic ram_10_clk_gate_qs;
  logic ram_10_clk_gate_wd;
  logic ram_10_clk_gate_we;
  logic power_gate_ram_block_10_ack_qs;
  logic ram_10_switch_qs;
  logic ram_10_switch_wd;
  logic ram_10_switch_we;
  logic ram_10_wait_ack_switch_on_qs;
  logic ram_10_wait_ack_switch_on_wd;
  logic ram_10_wait_ack_switch_on_we;
  logic ram_10_iso_qs;
  logic ram_10_iso_wd;
  logic ram_10_iso_we;
  logic ram_10_retentive_qs;
  logic ram_10_retentive_wd;
  logic ram_10_retentive_we;
  logic ram_11_clk_gate_qs;
  logic ram_11_clk_gate_wd;
  logic ram_11_clk_gate_we;
  logic power_gate_ram_block_11_ack_qs;
  logic ram_11_switch_qs;
  logic ram_11_switch_wd;
  logic ram_11_switch_we;
  logic ram_11_wait_ack_switch_on_qs;
  logic ram_11_wait_ack_switch_on_wd;
  logic ram_11_wait_ack_switch_on_we;
  logic ram_11_iso_qs;
  logic ram_11_iso_wd;
  logic ram_11_iso_we;
  logic ram_11_retentive_qs;
  logic ram_11_retentive_wd;
  logic ram_11_retentive_we;
  logic power_gate_external_0_ack_qs;
  logic external_0_reset_qs;
  logic external_0_reset_wd;
  logic external_0_reset_we;
  logic external_0_switch_qs;
  logic external_0_switch_wd;
  logic external_0_switch_we;
  logic external_0_wait_ack_switch_on_qs;
  logic external_0_wait_ack_switch_on_wd;
  logic external_0_wait_ack_switch_on_we;
  logic external_0_iso_qs;
  logic external_0_iso_wd;
  logic external_0_iso_we;
  logic external_ram_0_retentive_qs;
  logic external_ram_0_retentive_wd;
  logic external_ram_0_retentive_we;
  logic [2:0] monitor_power_gate_core_qs;
  logic [2:0] monitor_power_gate_periph_qs;
  logic [1:0] monitor_power_gate_ram_block_0_qs;
  logic [1:0] monitor_power_gate_ram_block_1_qs;
  logic [1:0] monitor_power_gate_ram_block_2_qs;
  logic [1:0] monitor_power_gate_ram_block_3_qs;
  logic [1:0] monitor_power_gate_ram_block_4_qs;
  logic [1:0] monitor_power_gate_ram_block_5_qs;
  logic [1:0] monitor_power_gate_ram_block_6_qs;
  logic [1:0] monitor_power_gate_ram_block_7_qs;
  logic [1:0] monitor_power_gate_ram_block_8_qs;
  logic [1:0] monitor_power_gate_ram_block_9_qs;
  logic [1:0] monitor_power_gate_ram_block_10_qs;
  logic [1:0] monitor_power_gate_ram_block_11_qs;
  logic [2:0] monitor_power_gate_external_0_qs;
  logic master_cpu_force_switch_off_qs;
  logic master_cpu_force_switch_off_wd;
  logic master_cpu_force_switch_off_we;
  logic master_cpu_force_switch_on_qs;
  logic master_cpu_force_switch_on_wd;
  logic master_cpu_force_switch_on_we;
  logic master_cpu_force_reset_assert_qs;
  logic master_cpu_force_reset_assert_wd;
  logic master_cpu_force_reset_assert_we;
  logic master_cpu_force_reset_deassert_qs;
  logic master_cpu_force_reset_deassert_wd;
  logic master_cpu_force_reset_deassert_we;
  logic master_cpu_force_iso_off_qs;
  logic master_cpu_force_iso_off_wd;
  logic master_cpu_force_iso_off_we;
  logic master_cpu_force_iso_on_qs;
  logic master_cpu_force_iso_on_wd;
  logic master_cpu_force_iso_on_we;

  // Register instances
  // R[wakeup_state]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_wakeup_state (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(wakeup_state_we),
      .wd(wakeup_state_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.wakeup_state.q),

      // to register interface (read)
      .qs(wakeup_state_qs)
  );


  // R[restore_address]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_restore_address (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(restore_address_we),
      .wd(restore_address_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.restore_address.q),

      // to register interface (read)
      .qs(restore_address_qs)
  );


  // R[en_wait_for_intr]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_en_wait_for_intr (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(en_wait_for_intr_we),
      .wd(en_wait_for_intr_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.en_wait_for_intr.q),

      // to register interface (read)
      .qs(en_wait_for_intr_qs)
  );


  // R[intr_state]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_intr_state (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(intr_state_we),
      .wd(intr_state_wd),

      // from internal hardware
      .de(hw2reg.intr_state.de),
      .d (hw2reg.intr_state.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.intr_state.q),

      // to register interface (read)
      .qs(intr_state_qs)
  );


  // R[power_gate_core]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_power_gate_core (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(power_gate_core_we),
      .wd(power_gate_core_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.power_gate_core.q),

      // to register interface (read)
      .qs(power_gate_core_qs)
  );


  // R[power_gate_core_ack]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RO"),
      .RESVAL  (1'h0)
  ) u_power_gate_core_ack (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.power_gate_core_ack.de),
      .d (hw2reg.power_gate_core_ack.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.power_gate_core_ack.q),

      // to register interface (read)
      .qs(power_gate_core_ack_qs)
  );


  // R[cpu_reset_assert_counter]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cpu_reset_assert_counter (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cpu_reset_assert_counter_we),
      .wd(cpu_reset_assert_counter_wd),

      // from internal hardware
      .de(hw2reg.cpu_reset_assert_counter.de),
      .d (hw2reg.cpu_reset_assert_counter.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.cpu_reset_assert_counter.q),

      // to register interface (read)
      .qs(cpu_reset_assert_counter_qs)
  );


  // R[cpu_reset_deassert_counter]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cpu_reset_deassert_counter (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cpu_reset_deassert_counter_we),
      .wd(cpu_reset_deassert_counter_wd),

      // from internal hardware
      .de(hw2reg.cpu_reset_deassert_counter.de),
      .d (hw2reg.cpu_reset_deassert_counter.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.cpu_reset_deassert_counter.q),

      // to register interface (read)
      .qs(cpu_reset_deassert_counter_qs)
  );


  // R[cpu_switch_off_counter]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cpu_switch_off_counter (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cpu_switch_off_counter_we),
      .wd(cpu_switch_off_counter_wd),

      // from internal hardware
      .de(hw2reg.cpu_switch_off_counter.de),
      .d (hw2reg.cpu_switch_off_counter.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.cpu_switch_off_counter.q),

      // to register interface (read)
      .qs(cpu_switch_off_counter_qs)
  );


  // R[cpu_switch_on_counter]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cpu_switch_on_counter (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cpu_switch_on_counter_we),
      .wd(cpu_switch_on_counter_wd),

      // from internal hardware
      .de(hw2reg.cpu_switch_on_counter.de),
      .d (hw2reg.cpu_switch_on_counter.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.cpu_switch_on_counter.q),

      // to register interface (read)
      .qs(cpu_switch_on_counter_qs)
  );


  // R[cpu_wait_ack_switch_on_counter]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_cpu_wait_ack_switch_on_counter (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cpu_wait_ack_switch_on_counter_we),
      .wd(cpu_wait_ack_switch_on_counter_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cpu_wait_ack_switch_on_counter.q),

      // to register interface (read)
      .qs(cpu_wait_ack_switch_on_counter_qs)
  );


  // R[cpu_iso_off_counter]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cpu_iso_off_counter (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cpu_iso_off_counter_we),
      .wd(cpu_iso_off_counter_wd),

      // from internal hardware
      .de(hw2reg.cpu_iso_off_counter.de),
      .d (hw2reg.cpu_iso_off_counter.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.cpu_iso_off_counter.q),

      // to register interface (read)
      .qs(cpu_iso_off_counter_qs)
  );


  // R[cpu_iso_on_counter]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cpu_iso_on_counter (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cpu_iso_on_counter_we),
      .wd(cpu_iso_on_counter_wd),

      // from internal hardware
      .de(hw2reg.cpu_iso_on_counter.de),
      .d (hw2reg.cpu_iso_on_counter.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.cpu_iso_on_counter.q),

      // to register interface (read)
      .qs(cpu_iso_on_counter_qs)
  );


  // R[cpu_counters_stop]: V(False)

  //   F[cpu_reset_assert_stop_bit_counter]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_cpu_counters_stop_cpu_reset_assert_stop_bit_counter (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cpu_counters_stop_cpu_reset_assert_stop_bit_counter_we),
      .wd(cpu_counters_stop_cpu_reset_assert_stop_bit_counter_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cpu_counters_stop.cpu_reset_assert_stop_bit_counter.q),

      // to register interface (read)
      .qs(cpu_counters_stop_cpu_reset_assert_stop_bit_counter_qs)
  );


  //   F[cpu_reset_deassert_stop_bit_counter]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_cpu_counters_stop_cpu_reset_deassert_stop_bit_counter (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cpu_counters_stop_cpu_reset_deassert_stop_bit_counter_we),
      .wd(cpu_counters_stop_cpu_reset_deassert_stop_bit_counter_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cpu_counters_stop.cpu_reset_deassert_stop_bit_counter.q),

      // to register interface (read)
      .qs(cpu_counters_stop_cpu_reset_deassert_stop_bit_counter_qs)
  );


  //   F[cpu_switch_off_stop_bit_counter]: 2:2
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_cpu_counters_stop_cpu_switch_off_stop_bit_counter (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cpu_counters_stop_cpu_switch_off_stop_bit_counter_we),
      .wd(cpu_counters_stop_cpu_switch_off_stop_bit_counter_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cpu_counters_stop.cpu_switch_off_stop_bit_counter.q),

      // to register interface (read)
      .qs(cpu_counters_stop_cpu_switch_off_stop_bit_counter_qs)
  );


  //   F[cpu_switch_on_stop_bit_counter]: 3:3
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_cpu_counters_stop_cpu_switch_on_stop_bit_counter (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cpu_counters_stop_cpu_switch_on_stop_bit_counter_we),
      .wd(cpu_counters_stop_cpu_switch_on_stop_bit_counter_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cpu_counters_stop.cpu_switch_on_stop_bit_counter.q),

      // to register interface (read)
      .qs(cpu_counters_stop_cpu_switch_on_stop_bit_counter_qs)
  );


  //   F[cpu_iso_off_stop_bit_counter]: 4:4
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_cpu_counters_stop_cpu_iso_off_stop_bit_counter (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cpu_counters_stop_cpu_iso_off_stop_bit_counter_we),
      .wd(cpu_counters_stop_cpu_iso_off_stop_bit_counter_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cpu_counters_stop.cpu_iso_off_stop_bit_counter.q),

      // to register interface (read)
      .qs(cpu_counters_stop_cpu_iso_off_stop_bit_counter_qs)
  );


  //   F[cpu_iso_on_stop_bit_counter]: 5:5
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_cpu_counters_stop_cpu_iso_on_stop_bit_counter (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cpu_counters_stop_cpu_iso_on_stop_bit_counter_we),
      .wd(cpu_counters_stop_cpu_iso_on_stop_bit_counter_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cpu_counters_stop.cpu_iso_on_stop_bit_counter.q),

      // to register interface (read)
      .qs(cpu_counters_stop_cpu_iso_on_stop_bit_counter_qs)
  );


  // R[power_gate_periph_ack]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RO"),
      .RESVAL  (1'h0)
  ) u_power_gate_periph_ack (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.power_gate_periph_ack.de),
      .d (hw2reg.power_gate_periph_ack.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.power_gate_periph_ack.q),

      // to register interface (read)
      .qs(power_gate_periph_ack_qs)
  );


  // R[periph_reset]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_periph_reset (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(periph_reset_we),
      .wd(periph_reset_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.periph_reset.q),

      // to register interface (read)
      .qs(periph_reset_qs)
  );


  // R[periph_switch]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_periph_switch (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(periph_switch_we),
      .wd(periph_switch_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.periph_switch.q),

      // to register interface (read)
      .qs(periph_switch_qs)
  );


  // R[periph_wait_ack_switch_on]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_periph_wait_ack_switch_on (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(periph_wait_ack_switch_on_we),
      .wd(periph_wait_ack_switch_on_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.periph_wait_ack_switch_on.q),

      // to register interface (read)
      .qs(periph_wait_ack_switch_on_qs)
  );


  // R[periph_iso]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_periph_iso (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(periph_iso_we),
      .wd(periph_iso_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.periph_iso.q),

      // to register interface (read)
      .qs(periph_iso_qs)
  );


  // R[periph_clk_gate]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_periph_clk_gate (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(periph_clk_gate_we),
      .wd(periph_clk_gate_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.periph_clk_gate.q),

      // to register interface (read)
      .qs(periph_clk_gate_qs)
  );


  // R[ram_0_clk_gate]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_0_clk_gate (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_0_clk_gate_we),
      .wd(ram_0_clk_gate_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_0_clk_gate.q),

      // to register interface (read)
      .qs(ram_0_clk_gate_qs)
  );


  // R[power_gate_ram_block_0_ack]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RO"),
      .RESVAL  (1'h0)
  ) u_power_gate_ram_block_0_ack (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.power_gate_ram_block_0_ack.de),
      .d (hw2reg.power_gate_ram_block_0_ack.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.power_gate_ram_block_0_ack.q),

      // to register interface (read)
      .qs(power_gate_ram_block_0_ack_qs)
  );


  // R[ram_0_switch]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_0_switch (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_0_switch_we),
      .wd(ram_0_switch_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_0_switch.q),

      // to register interface (read)
      .qs(ram_0_switch_qs)
  );


  // R[ram_0_wait_ack_switch_on]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_0_wait_ack_switch_on (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_0_wait_ack_switch_on_we),
      .wd(ram_0_wait_ack_switch_on_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_0_wait_ack_switch_on.q),

      // to register interface (read)
      .qs(ram_0_wait_ack_switch_on_qs)
  );


  // R[ram_0_iso]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_0_iso (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_0_iso_we),
      .wd(ram_0_iso_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_0_iso.q),

      // to register interface (read)
      .qs(ram_0_iso_qs)
  );


  // R[ram_0_retentive]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_0_retentive (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_0_retentive_we),
      .wd(ram_0_retentive_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_0_retentive.q),

      // to register interface (read)
      .qs(ram_0_retentive_qs)
  );


  // R[ram_1_clk_gate]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_1_clk_gate (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_1_clk_gate_we),
      .wd(ram_1_clk_gate_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_1_clk_gate.q),

      // to register interface (read)
      .qs(ram_1_clk_gate_qs)
  );


  // R[power_gate_ram_block_1_ack]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RO"),
      .RESVAL  (1'h0)
  ) u_power_gate_ram_block_1_ack (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.power_gate_ram_block_1_ack.de),
      .d (hw2reg.power_gate_ram_block_1_ack.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.power_gate_ram_block_1_ack.q),

      // to register interface (read)
      .qs(power_gate_ram_block_1_ack_qs)
  );


  // R[ram_1_switch]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_1_switch (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_1_switch_we),
      .wd(ram_1_switch_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_1_switch.q),

      // to register interface (read)
      .qs(ram_1_switch_qs)
  );


  // R[ram_1_wait_ack_switch_on]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_1_wait_ack_switch_on (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_1_wait_ack_switch_on_we),
      .wd(ram_1_wait_ack_switch_on_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_1_wait_ack_switch_on.q),

      // to register interface (read)
      .qs(ram_1_wait_ack_switch_on_qs)
  );


  // R[ram_1_iso]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_1_iso (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_1_iso_we),
      .wd(ram_1_iso_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_1_iso.q),

      // to register interface (read)
      .qs(ram_1_iso_qs)
  );


  // R[ram_1_retentive]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_1_retentive (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_1_retentive_we),
      .wd(ram_1_retentive_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_1_retentive.q),

      // to register interface (read)
      .qs(ram_1_retentive_qs)
  );


  // R[ram_2_clk_gate]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_2_clk_gate (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_2_clk_gate_we),
      .wd(ram_2_clk_gate_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_2_clk_gate.q),

      // to register interface (read)
      .qs(ram_2_clk_gate_qs)
  );


  // R[power_gate_ram_block_2_ack]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RO"),
      .RESVAL  (1'h0)
  ) u_power_gate_ram_block_2_ack (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.power_gate_ram_block_2_ack.de),
      .d (hw2reg.power_gate_ram_block_2_ack.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.power_gate_ram_block_2_ack.q),

      // to register interface (read)
      .qs(power_gate_ram_block_2_ack_qs)
  );


  // R[ram_2_switch]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_2_switch (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_2_switch_we),
      .wd(ram_2_switch_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_2_switch.q),

      // to register interface (read)
      .qs(ram_2_switch_qs)
  );


  // R[ram_2_wait_ack_switch_on]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_2_wait_ack_switch_on (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_2_wait_ack_switch_on_we),
      .wd(ram_2_wait_ack_switch_on_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_2_wait_ack_switch_on.q),

      // to register interface (read)
      .qs(ram_2_wait_ack_switch_on_qs)
  );


  // R[ram_2_iso]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_2_iso (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_2_iso_we),
      .wd(ram_2_iso_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_2_iso.q),

      // to register interface (read)
      .qs(ram_2_iso_qs)
  );


  // R[ram_2_retentive]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_2_retentive (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_2_retentive_we),
      .wd(ram_2_retentive_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_2_retentive.q),

      // to register interface (read)
      .qs(ram_2_retentive_qs)
  );


  // R[ram_3_clk_gate]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_3_clk_gate (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_3_clk_gate_we),
      .wd(ram_3_clk_gate_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_3_clk_gate.q),

      // to register interface (read)
      .qs(ram_3_clk_gate_qs)
  );


  // R[power_gate_ram_block_3_ack]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RO"),
      .RESVAL  (1'h0)
  ) u_power_gate_ram_block_3_ack (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.power_gate_ram_block_3_ack.de),
      .d (hw2reg.power_gate_ram_block_3_ack.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.power_gate_ram_block_3_ack.q),

      // to register interface (read)
      .qs(power_gate_ram_block_3_ack_qs)
  );


  // R[ram_3_switch]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_3_switch (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_3_switch_we),
      .wd(ram_3_switch_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_3_switch.q),

      // to register interface (read)
      .qs(ram_3_switch_qs)
  );


  // R[ram_3_wait_ack_switch_on]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_3_wait_ack_switch_on (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_3_wait_ack_switch_on_we),
      .wd(ram_3_wait_ack_switch_on_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_3_wait_ack_switch_on.q),

      // to register interface (read)
      .qs(ram_3_wait_ack_switch_on_qs)
  );


  // R[ram_3_iso]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_3_iso (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_3_iso_we),
      .wd(ram_3_iso_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_3_iso.q),

      // to register interface (read)
      .qs(ram_3_iso_qs)
  );


  // R[ram_3_retentive]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_3_retentive (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_3_retentive_we),
      .wd(ram_3_retentive_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_3_retentive.q),

      // to register interface (read)
      .qs(ram_3_retentive_qs)
  );


  // R[ram_4_clk_gate]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_4_clk_gate (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_4_clk_gate_we),
      .wd(ram_4_clk_gate_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_4_clk_gate.q),

      // to register interface (read)
      .qs(ram_4_clk_gate_qs)
  );


  // R[power_gate_ram_block_4_ack]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RO"),
      .RESVAL  (1'h0)
  ) u_power_gate_ram_block_4_ack (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.power_gate_ram_block_4_ack.de),
      .d (hw2reg.power_gate_ram_block_4_ack.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.power_gate_ram_block_4_ack.q),

      // to register interface (read)
      .qs(power_gate_ram_block_4_ack_qs)
  );


  // R[ram_4_switch]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_4_switch (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_4_switch_we),
      .wd(ram_4_switch_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_4_switch.q),

      // to register interface (read)
      .qs(ram_4_switch_qs)
  );


  // R[ram_4_wait_ack_switch_on]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_4_wait_ack_switch_on (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_4_wait_ack_switch_on_we),
      .wd(ram_4_wait_ack_switch_on_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_4_wait_ack_switch_on.q),

      // to register interface (read)
      .qs(ram_4_wait_ack_switch_on_qs)
  );


  // R[ram_4_iso]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_4_iso (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_4_iso_we),
      .wd(ram_4_iso_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_4_iso.q),

      // to register interface (read)
      .qs(ram_4_iso_qs)
  );


  // R[ram_4_retentive]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_4_retentive (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_4_retentive_we),
      .wd(ram_4_retentive_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_4_retentive.q),

      // to register interface (read)
      .qs(ram_4_retentive_qs)
  );


  // R[ram_5_clk_gate]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_5_clk_gate (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_5_clk_gate_we),
      .wd(ram_5_clk_gate_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_5_clk_gate.q),

      // to register interface (read)
      .qs(ram_5_clk_gate_qs)
  );


  // R[power_gate_ram_block_5_ack]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RO"),
      .RESVAL  (1'h0)
  ) u_power_gate_ram_block_5_ack (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.power_gate_ram_block_5_ack.de),
      .d (hw2reg.power_gate_ram_block_5_ack.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.power_gate_ram_block_5_ack.q),

      // to register interface (read)
      .qs(power_gate_ram_block_5_ack_qs)
  );


  // R[ram_5_switch]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_5_switch (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_5_switch_we),
      .wd(ram_5_switch_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_5_switch.q),

      // to register interface (read)
      .qs(ram_5_switch_qs)
  );


  // R[ram_5_wait_ack_switch_on]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_5_wait_ack_switch_on (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_5_wait_ack_switch_on_we),
      .wd(ram_5_wait_ack_switch_on_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_5_wait_ack_switch_on.q),

      // to register interface (read)
      .qs(ram_5_wait_ack_switch_on_qs)
  );


  // R[ram_5_iso]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_5_iso (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_5_iso_we),
      .wd(ram_5_iso_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_5_iso.q),

      // to register interface (read)
      .qs(ram_5_iso_qs)
  );


  // R[ram_5_retentive]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_5_retentive (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_5_retentive_we),
      .wd(ram_5_retentive_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_5_retentive.q),

      // to register interface (read)
      .qs(ram_5_retentive_qs)
  );


  // R[ram_6_clk_gate]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_6_clk_gate (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_6_clk_gate_we),
      .wd(ram_6_clk_gate_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_6_clk_gate.q),

      // to register interface (read)
      .qs(ram_6_clk_gate_qs)
  );


  // R[power_gate_ram_block_6_ack]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RO"),
      .RESVAL  (1'h0)
  ) u_power_gate_ram_block_6_ack (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.power_gate_ram_block_6_ack.de),
      .d (hw2reg.power_gate_ram_block_6_ack.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.power_gate_ram_block_6_ack.q),

      // to register interface (read)
      .qs(power_gate_ram_block_6_ack_qs)
  );


  // R[ram_6_switch]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_6_switch (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_6_switch_we),
      .wd(ram_6_switch_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_6_switch.q),

      // to register interface (read)
      .qs(ram_6_switch_qs)
  );


  // R[ram_6_wait_ack_switch_on]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_6_wait_ack_switch_on (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_6_wait_ack_switch_on_we),
      .wd(ram_6_wait_ack_switch_on_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_6_wait_ack_switch_on.q),

      // to register interface (read)
      .qs(ram_6_wait_ack_switch_on_qs)
  );


  // R[ram_6_iso]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_6_iso (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_6_iso_we),
      .wd(ram_6_iso_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_6_iso.q),

      // to register interface (read)
      .qs(ram_6_iso_qs)
  );


  // R[ram_6_retentive]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_6_retentive (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_6_retentive_we),
      .wd(ram_6_retentive_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_6_retentive.q),

      // to register interface (read)
      .qs(ram_6_retentive_qs)
  );


  // R[ram_7_clk_gate]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_7_clk_gate (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_7_clk_gate_we),
      .wd(ram_7_clk_gate_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_7_clk_gate.q),

      // to register interface (read)
      .qs(ram_7_clk_gate_qs)
  );


  // R[power_gate_ram_block_7_ack]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RO"),
      .RESVAL  (1'h0)
  ) u_power_gate_ram_block_7_ack (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.power_gate_ram_block_7_ack.de),
      .d (hw2reg.power_gate_ram_block_7_ack.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.power_gate_ram_block_7_ack.q),

      // to register interface (read)
      .qs(power_gate_ram_block_7_ack_qs)
  );


  // R[ram_7_switch]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_7_switch (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_7_switch_we),
      .wd(ram_7_switch_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_7_switch.q),

      // to register interface (read)
      .qs(ram_7_switch_qs)
  );


  // R[ram_7_wait_ack_switch_on]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_7_wait_ack_switch_on (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_7_wait_ack_switch_on_we),
      .wd(ram_7_wait_ack_switch_on_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_7_wait_ack_switch_on.q),

      // to register interface (read)
      .qs(ram_7_wait_ack_switch_on_qs)
  );


  // R[ram_7_iso]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_7_iso (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_7_iso_we),
      .wd(ram_7_iso_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_7_iso.q),

      // to register interface (read)
      .qs(ram_7_iso_qs)
  );


  // R[ram_7_retentive]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_7_retentive (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_7_retentive_we),
      .wd(ram_7_retentive_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_7_retentive.q),

      // to register interface (read)
      .qs(ram_7_retentive_qs)
  );


  // R[ram_8_clk_gate]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_8_clk_gate (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_8_clk_gate_we),
      .wd(ram_8_clk_gate_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_8_clk_gate.q),

      // to register interface (read)
      .qs(ram_8_clk_gate_qs)
  );


  // R[power_gate_ram_block_8_ack]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RO"),
      .RESVAL  (1'h0)
  ) u_power_gate_ram_block_8_ack (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.power_gate_ram_block_8_ack.de),
      .d (hw2reg.power_gate_ram_block_8_ack.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.power_gate_ram_block_8_ack.q),

      // to register interface (read)
      .qs(power_gate_ram_block_8_ack_qs)
  );


  // R[ram_8_switch]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_8_switch (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_8_switch_we),
      .wd(ram_8_switch_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_8_switch.q),

      // to register interface (read)
      .qs(ram_8_switch_qs)
  );


  // R[ram_8_wait_ack_switch_on]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_8_wait_ack_switch_on (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_8_wait_ack_switch_on_we),
      .wd(ram_8_wait_ack_switch_on_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_8_wait_ack_switch_on.q),

      // to register interface (read)
      .qs(ram_8_wait_ack_switch_on_qs)
  );


  // R[ram_8_iso]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_8_iso (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_8_iso_we),
      .wd(ram_8_iso_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_8_iso.q),

      // to register interface (read)
      .qs(ram_8_iso_qs)
  );


  // R[ram_8_retentive]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_8_retentive (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_8_retentive_we),
      .wd(ram_8_retentive_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_8_retentive.q),

      // to register interface (read)
      .qs(ram_8_retentive_qs)
  );


  // R[ram_9_clk_gate]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_9_clk_gate (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_9_clk_gate_we),
      .wd(ram_9_clk_gate_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_9_clk_gate.q),

      // to register interface (read)
      .qs(ram_9_clk_gate_qs)
  );


  // R[power_gate_ram_block_9_ack]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RO"),
      .RESVAL  (1'h0)
  ) u_power_gate_ram_block_9_ack (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.power_gate_ram_block_9_ack.de),
      .d (hw2reg.power_gate_ram_block_9_ack.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.power_gate_ram_block_9_ack.q),

      // to register interface (read)
      .qs(power_gate_ram_block_9_ack_qs)
  );


  // R[ram_9_switch]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_9_switch (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_9_switch_we),
      .wd(ram_9_switch_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_9_switch.q),

      // to register interface (read)
      .qs(ram_9_switch_qs)
  );


  // R[ram_9_wait_ack_switch_on]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_9_wait_ack_switch_on (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_9_wait_ack_switch_on_we),
      .wd(ram_9_wait_ack_switch_on_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_9_wait_ack_switch_on.q),

      // to register interface (read)
      .qs(ram_9_wait_ack_switch_on_qs)
  );


  // R[ram_9_iso]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_9_iso (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_9_iso_we),
      .wd(ram_9_iso_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_9_iso.q),

      // to register interface (read)
      .qs(ram_9_iso_qs)
  );


  // R[ram_9_retentive]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_9_retentive (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_9_retentive_we),
      .wd(ram_9_retentive_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_9_retentive.q),

      // to register interface (read)
      .qs(ram_9_retentive_qs)
  );


  // R[ram_10_clk_gate]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_10_clk_gate (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_10_clk_gate_we),
      .wd(ram_10_clk_gate_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_10_clk_gate.q),

      // to register interface (read)
      .qs(ram_10_clk_gate_qs)
  );


  // R[power_gate_ram_block_10_ack]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RO"),
      .RESVAL  (1'h0)
  ) u_power_gate_ram_block_10_ack (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.power_gate_ram_block_10_ack.de),
      .d (hw2reg.power_gate_ram_block_10_ack.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.power_gate_ram_block_10_ack.q),

      // to register interface (read)
      .qs(power_gate_ram_block_10_ack_qs)
  );


  // R[ram_10_switch]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_10_switch (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_10_switch_we),
      .wd(ram_10_switch_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_10_switch.q),

      // to register interface (read)
      .qs(ram_10_switch_qs)
  );


  // R[ram_10_wait_ack_switch_on]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_10_wait_ack_switch_on (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_10_wait_ack_switch_on_we),
      .wd(ram_10_wait_ack_switch_on_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_10_wait_ack_switch_on.q),

      // to register interface (read)
      .qs(ram_10_wait_ack_switch_on_qs)
  );


  // R[ram_10_iso]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_10_iso (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_10_iso_we),
      .wd(ram_10_iso_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_10_iso.q),

      // to register interface (read)
      .qs(ram_10_iso_qs)
  );


  // R[ram_10_retentive]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_10_retentive (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_10_retentive_we),
      .wd(ram_10_retentive_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_10_retentive.q),

      // to register interface (read)
      .qs(ram_10_retentive_qs)
  );


  // R[ram_11_clk_gate]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_11_clk_gate (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_11_clk_gate_we),
      .wd(ram_11_clk_gate_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_11_clk_gate.q),

      // to register interface (read)
      .qs(ram_11_clk_gate_qs)
  );


  // R[power_gate_ram_block_11_ack]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RO"),
      .RESVAL  (1'h0)
  ) u_power_gate_ram_block_11_ack (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.power_gate_ram_block_11_ack.de),
      .d (hw2reg.power_gate_ram_block_11_ack.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.power_gate_ram_block_11_ack.q),

      // to register interface (read)
      .qs(power_gate_ram_block_11_ack_qs)
  );


  // R[ram_11_switch]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_11_switch (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_11_switch_we),
      .wd(ram_11_switch_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_11_switch.q),

      // to register interface (read)
      .qs(ram_11_switch_qs)
  );


  // R[ram_11_wait_ack_switch_on]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_11_wait_ack_switch_on (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_11_wait_ack_switch_on_we),
      .wd(ram_11_wait_ack_switch_on_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_11_wait_ack_switch_on.q),

      // to register interface (read)
      .qs(ram_11_wait_ack_switch_on_qs)
  );


  // R[ram_11_iso]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_11_iso (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_11_iso_we),
      .wd(ram_11_iso_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_11_iso.q),

      // to register interface (read)
      .qs(ram_11_iso_qs)
  );


  // R[ram_11_retentive]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_ram_11_retentive (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(ram_11_retentive_we),
      .wd(ram_11_retentive_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.ram_11_retentive.q),

      // to register interface (read)
      .qs(ram_11_retentive_qs)
  );


  // R[power_gate_external_0_ack]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RO"),
      .RESVAL  (1'h0)
  ) u_power_gate_external_0_ack (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.power_gate_external_0_ack.de),
      .d (hw2reg.power_gate_external_0_ack.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.power_gate_external_0_ack.q),

      // to register interface (read)
      .qs(power_gate_external_0_ack_qs)
  );


  // R[external_0_reset]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_external_0_reset (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(external_0_reset_we),
      .wd(external_0_reset_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.external_0_reset.q),

      // to register interface (read)
      .qs(external_0_reset_qs)
  );


  // R[external_0_switch]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_external_0_switch (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(external_0_switch_we),
      .wd(external_0_switch_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.external_0_switch.q),

      // to register interface (read)
      .qs(external_0_switch_qs)
  );


  // R[external_0_wait_ack_switch_on]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_external_0_wait_ack_switch_on (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(external_0_wait_ack_switch_on_we),
      .wd(external_0_wait_ack_switch_on_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.external_0_wait_ack_switch_on.q),

      // to register interface (read)
      .qs(external_0_wait_ack_switch_on_qs)
  );


  // R[external_0_iso]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_external_0_iso (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(external_0_iso_we),
      .wd(external_0_iso_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.external_0_iso.q),

      // to register interface (read)
      .qs(external_0_iso_qs)
  );


  // R[external_ram_0_retentive]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_external_ram_0_retentive (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(external_ram_0_retentive_we),
      .wd(external_ram_0_retentive_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.external_ram_0_retentive.q),

      // to register interface (read)
      .qs(external_ram_0_retentive_qs)
  );


  // R[monitor_power_gate_core]: V(False)

  prim_subreg #(
      .DW      (3),
      .SWACCESS("RO"),
      .RESVAL  (3'h0)
  ) u_monitor_power_gate_core (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.monitor_power_gate_core.de),
      .d (hw2reg.monitor_power_gate_core.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(monitor_power_gate_core_qs)
  );


  // R[monitor_power_gate_periph]: V(False)

  prim_subreg #(
      .DW      (3),
      .SWACCESS("RO"),
      .RESVAL  (3'h0)
  ) u_monitor_power_gate_periph (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.monitor_power_gate_periph.de),
      .d (hw2reg.monitor_power_gate_periph.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(monitor_power_gate_periph_qs)
  );


  // R[monitor_power_gate_ram_block_0]: V(False)

  prim_subreg #(
      .DW      (2),
      .SWACCESS("RO"),
      .RESVAL  (2'h0)
  ) u_monitor_power_gate_ram_block_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.monitor_power_gate_ram_block_0.de),
      .d (hw2reg.monitor_power_gate_ram_block_0.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(monitor_power_gate_ram_block_0_qs)
  );


  // R[monitor_power_gate_ram_block_1]: V(False)

  prim_subreg #(
      .DW      (2),
      .SWACCESS("RO"),
      .RESVAL  (2'h0)
  ) u_monitor_power_gate_ram_block_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.monitor_power_gate_ram_block_1.de),
      .d (hw2reg.monitor_power_gate_ram_block_1.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(monitor_power_gate_ram_block_1_qs)
  );


  // R[monitor_power_gate_ram_block_2]: V(False)

  prim_subreg #(
      .DW      (2),
      .SWACCESS("RO"),
      .RESVAL  (2'h0)
  ) u_monitor_power_gate_ram_block_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.monitor_power_gate_ram_block_2.de),
      .d (hw2reg.monitor_power_gate_ram_block_2.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(monitor_power_gate_ram_block_2_qs)
  );


  // R[monitor_power_gate_ram_block_3]: V(False)

  prim_subreg #(
      .DW      (2),
      .SWACCESS("RO"),
      .RESVAL  (2'h0)
  ) u_monitor_power_gate_ram_block_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.monitor_power_gate_ram_block_3.de),
      .d (hw2reg.monitor_power_gate_ram_block_3.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(monitor_power_gate_ram_block_3_qs)
  );


  // R[monitor_power_gate_ram_block_4]: V(False)

  prim_subreg #(
      .DW      (2),
      .SWACCESS("RO"),
      .RESVAL  (2'h0)
  ) u_monitor_power_gate_ram_block_4 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.monitor_power_gate_ram_block_4.de),
      .d (hw2reg.monitor_power_gate_ram_block_4.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(monitor_power_gate_ram_block_4_qs)
  );


  // R[monitor_power_gate_ram_block_5]: V(False)

  prim_subreg #(
      .DW      (2),
      .SWACCESS("RO"),
      .RESVAL  (2'h0)
  ) u_monitor_power_gate_ram_block_5 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.monitor_power_gate_ram_block_5.de),
      .d (hw2reg.monitor_power_gate_ram_block_5.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(monitor_power_gate_ram_block_5_qs)
  );


  // R[monitor_power_gate_ram_block_6]: V(False)

  prim_subreg #(
      .DW      (2),
      .SWACCESS("RO"),
      .RESVAL  (2'h0)
  ) u_monitor_power_gate_ram_block_6 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.monitor_power_gate_ram_block_6.de),
      .d (hw2reg.monitor_power_gate_ram_block_6.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(monitor_power_gate_ram_block_6_qs)
  );


  // R[monitor_power_gate_ram_block_7]: V(False)

  prim_subreg #(
      .DW      (2),
      .SWACCESS("RO"),
      .RESVAL  (2'h0)
  ) u_monitor_power_gate_ram_block_7 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.monitor_power_gate_ram_block_7.de),
      .d (hw2reg.monitor_power_gate_ram_block_7.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(monitor_power_gate_ram_block_7_qs)
  );


  // R[monitor_power_gate_ram_block_8]: V(False)

  prim_subreg #(
      .DW      (2),
      .SWACCESS("RO"),
      .RESVAL  (2'h0)
  ) u_monitor_power_gate_ram_block_8 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.monitor_power_gate_ram_block_8.de),
      .d (hw2reg.monitor_power_gate_ram_block_8.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(monitor_power_gate_ram_block_8_qs)
  );


  // R[monitor_power_gate_ram_block_9]: V(False)

  prim_subreg #(
      .DW      (2),
      .SWACCESS("RO"),
      .RESVAL  (2'h0)
  ) u_monitor_power_gate_ram_block_9 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.monitor_power_gate_ram_block_9.de),
      .d (hw2reg.monitor_power_gate_ram_block_9.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(monitor_power_gate_ram_block_9_qs)
  );


  // R[monitor_power_gate_ram_block_10]: V(False)

  prim_subreg #(
      .DW      (2),
      .SWACCESS("RO"),
      .RESVAL  (2'h0)
  ) u_monitor_power_gate_ram_block_10 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.monitor_power_gate_ram_block_10.de),
      .d (hw2reg.monitor_power_gate_ram_block_10.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(monitor_power_gate_ram_block_10_qs)
  );


  // R[monitor_power_gate_ram_block_11]: V(False)

  prim_subreg #(
      .DW      (2),
      .SWACCESS("RO"),
      .RESVAL  (2'h0)
  ) u_monitor_power_gate_ram_block_11 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.monitor_power_gate_ram_block_11.de),
      .d (hw2reg.monitor_power_gate_ram_block_11.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(monitor_power_gate_ram_block_11_qs)
  );


  // R[monitor_power_gate_external_0]: V(False)

  prim_subreg #(
      .DW      (3),
      .SWACCESS("RO"),
      .RESVAL  (3'h0)
  ) u_monitor_power_gate_external_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.monitor_power_gate_external_0.de),
      .d (hw2reg.monitor_power_gate_external_0.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(monitor_power_gate_external_0_qs)
  );


  // R[master_cpu_force_switch_off]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_master_cpu_force_switch_off (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(master_cpu_force_switch_off_we),
      .wd(master_cpu_force_switch_off_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.master_cpu_force_switch_off.q),

      // to register interface (read)
      .qs(master_cpu_force_switch_off_qs)
  );


  // R[master_cpu_force_switch_on]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_master_cpu_force_switch_on (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(master_cpu_force_switch_on_we),
      .wd(master_cpu_force_switch_on_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.master_cpu_force_switch_on.q),

      // to register interface (read)
      .qs(master_cpu_force_switch_on_qs)
  );


  // R[master_cpu_force_reset_assert]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_master_cpu_force_reset_assert (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(master_cpu_force_reset_assert_we),
      .wd(master_cpu_force_reset_assert_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.master_cpu_force_reset_assert.q),

      // to register interface (read)
      .qs(master_cpu_force_reset_assert_qs)
  );


  // R[master_cpu_force_reset_deassert]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_master_cpu_force_reset_deassert (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(master_cpu_force_reset_deassert_we),
      .wd(master_cpu_force_reset_deassert_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.master_cpu_force_reset_deassert.q),

      // to register interface (read)
      .qs(master_cpu_force_reset_deassert_qs)
  );


  // R[master_cpu_force_iso_off]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_master_cpu_force_iso_off (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(master_cpu_force_iso_off_we),
      .wd(master_cpu_force_iso_off_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.master_cpu_force_iso_off.q),

      // to register interface (read)
      .qs(master_cpu_force_iso_off_qs)
  );


  // R[master_cpu_force_iso_on]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_master_cpu_force_iso_on (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(master_cpu_force_iso_on_we),
      .wd(master_cpu_force_iso_on_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.master_cpu_force_iso_on.q),

      // to register interface (read)
      .qs(master_cpu_force_iso_on_qs)
  );




  logic [118:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == POWER_MANAGER_WAKEUP_STATE_OFFSET);
    addr_hit[1] = (reg_addr == POWER_MANAGER_RESTORE_ADDRESS_OFFSET);
    addr_hit[2] = (reg_addr == POWER_MANAGER_EN_WAIT_FOR_INTR_OFFSET);
    addr_hit[3] = (reg_addr == POWER_MANAGER_INTR_STATE_OFFSET);
    addr_hit[4] = (reg_addr == POWER_MANAGER_POWER_GATE_CORE_OFFSET);
    addr_hit[5] = (reg_addr == POWER_MANAGER_POWER_GATE_CORE_ACK_OFFSET);
    addr_hit[6] = (reg_addr == POWER_MANAGER_CPU_RESET_ASSERT_COUNTER_OFFSET);
    addr_hit[7] = (reg_addr == POWER_MANAGER_CPU_RESET_DEASSERT_COUNTER_OFFSET);
    addr_hit[8] = (reg_addr == POWER_MANAGER_CPU_SWITCH_OFF_COUNTER_OFFSET);
    addr_hit[9] = (reg_addr == POWER_MANAGER_CPU_SWITCH_ON_COUNTER_OFFSET);
    addr_hit[10] = (reg_addr == POWER_MANAGER_CPU_WAIT_ACK_SWITCH_ON_COUNTER_OFFSET);
    addr_hit[11] = (reg_addr == POWER_MANAGER_CPU_ISO_OFF_COUNTER_OFFSET);
    addr_hit[12] = (reg_addr == POWER_MANAGER_CPU_ISO_ON_COUNTER_OFFSET);
    addr_hit[13] = (reg_addr == POWER_MANAGER_CPU_COUNTERS_STOP_OFFSET);
    addr_hit[14] = (reg_addr == POWER_MANAGER_POWER_GATE_PERIPH_ACK_OFFSET);
    addr_hit[15] = (reg_addr == POWER_MANAGER_PERIPH_RESET_OFFSET);
    addr_hit[16] = (reg_addr == POWER_MANAGER_PERIPH_SWITCH_OFFSET);
    addr_hit[17] = (reg_addr == POWER_MANAGER_PERIPH_WAIT_ACK_SWITCH_ON_OFFSET);
    addr_hit[18] = (reg_addr == POWER_MANAGER_PERIPH_ISO_OFFSET);
    addr_hit[19] = (reg_addr == POWER_MANAGER_PERIPH_CLK_GATE_OFFSET);
    addr_hit[20] = (reg_addr == POWER_MANAGER_RAM_0_CLK_GATE_OFFSET);
    addr_hit[21] = (reg_addr == POWER_MANAGER_POWER_GATE_RAM_BLOCK_0_ACK_OFFSET);
    addr_hit[22] = (reg_addr == POWER_MANAGER_RAM_0_SWITCH_OFFSET);
    addr_hit[23] = (reg_addr == POWER_MANAGER_RAM_0_WAIT_ACK_SWITCH_ON_OFFSET);
    addr_hit[24] = (reg_addr == POWER_MANAGER_RAM_0_ISO_OFFSET);
    addr_hit[25] = (reg_addr == POWER_MANAGER_RAM_0_RETENTIVE_OFFSET);
    addr_hit[26] = (reg_addr == POWER_MANAGER_RAM_1_CLK_GATE_OFFSET);
    addr_hit[27] = (reg_addr == POWER_MANAGER_POWER_GATE_RAM_BLOCK_1_ACK_OFFSET);
    addr_hit[28] = (reg_addr == POWER_MANAGER_RAM_1_SWITCH_OFFSET);
    addr_hit[29] = (reg_addr == POWER_MANAGER_RAM_1_WAIT_ACK_SWITCH_ON_OFFSET);
    addr_hit[30] = (reg_addr == POWER_MANAGER_RAM_1_ISO_OFFSET);
    addr_hit[31] = (reg_addr == POWER_MANAGER_RAM_1_RETENTIVE_OFFSET);
    addr_hit[32] = (reg_addr == POWER_MANAGER_RAM_2_CLK_GATE_OFFSET);
    addr_hit[33] = (reg_addr == POWER_MANAGER_POWER_GATE_RAM_BLOCK_2_ACK_OFFSET);
    addr_hit[34] = (reg_addr == POWER_MANAGER_RAM_2_SWITCH_OFFSET);
    addr_hit[35] = (reg_addr == POWER_MANAGER_RAM_2_WAIT_ACK_SWITCH_ON_OFFSET);
    addr_hit[36] = (reg_addr == POWER_MANAGER_RAM_2_ISO_OFFSET);
    addr_hit[37] = (reg_addr == POWER_MANAGER_RAM_2_RETENTIVE_OFFSET);
    addr_hit[38] = (reg_addr == POWER_MANAGER_RAM_3_CLK_GATE_OFFSET);
    addr_hit[39] = (reg_addr == POWER_MANAGER_POWER_GATE_RAM_BLOCK_3_ACK_OFFSET);
    addr_hit[40] = (reg_addr == POWER_MANAGER_RAM_3_SWITCH_OFFSET);
    addr_hit[41] = (reg_addr == POWER_MANAGER_RAM_3_WAIT_ACK_SWITCH_ON_OFFSET);
    addr_hit[42] = (reg_addr == POWER_MANAGER_RAM_3_ISO_OFFSET);
    addr_hit[43] = (reg_addr == POWER_MANAGER_RAM_3_RETENTIVE_OFFSET);
    addr_hit[44] = (reg_addr == POWER_MANAGER_RAM_4_CLK_GATE_OFFSET);
    addr_hit[45] = (reg_addr == POWER_MANAGER_POWER_GATE_RAM_BLOCK_4_ACK_OFFSET);
    addr_hit[46] = (reg_addr == POWER_MANAGER_RAM_4_SWITCH_OFFSET);
    addr_hit[47] = (reg_addr == POWER_MANAGER_RAM_4_WAIT_ACK_SWITCH_ON_OFFSET);
    addr_hit[48] = (reg_addr == POWER_MANAGER_RAM_4_ISO_OFFSET);
    addr_hit[49] = (reg_addr == POWER_MANAGER_RAM_4_RETENTIVE_OFFSET);
    addr_hit[50] = (reg_addr == POWER_MANAGER_RAM_5_CLK_GATE_OFFSET);
    addr_hit[51] = (reg_addr == POWER_MANAGER_POWER_GATE_RAM_BLOCK_5_ACK_OFFSET);
    addr_hit[52] = (reg_addr == POWER_MANAGER_RAM_5_SWITCH_OFFSET);
    addr_hit[53] = (reg_addr == POWER_MANAGER_RAM_5_WAIT_ACK_SWITCH_ON_OFFSET);
    addr_hit[54] = (reg_addr == POWER_MANAGER_RAM_5_ISO_OFFSET);
    addr_hit[55] = (reg_addr == POWER_MANAGER_RAM_5_RETENTIVE_OFFSET);
    addr_hit[56] = (reg_addr == POWER_MANAGER_RAM_6_CLK_GATE_OFFSET);
    addr_hit[57] = (reg_addr == POWER_MANAGER_POWER_GATE_RAM_BLOCK_6_ACK_OFFSET);
    addr_hit[58] = (reg_addr == POWER_MANAGER_RAM_6_SWITCH_OFFSET);
    addr_hit[59] = (reg_addr == POWER_MANAGER_RAM_6_WAIT_ACK_SWITCH_ON_OFFSET);
    addr_hit[60] = (reg_addr == POWER_MANAGER_RAM_6_ISO_OFFSET);
    addr_hit[61] = (reg_addr == POWER_MANAGER_RAM_6_RETENTIVE_OFFSET);
    addr_hit[62] = (reg_addr == POWER_MANAGER_RAM_7_CLK_GATE_OFFSET);
    addr_hit[63] = (reg_addr == POWER_MANAGER_POWER_GATE_RAM_BLOCK_7_ACK_OFFSET);
    addr_hit[64] = (reg_addr == POWER_MANAGER_RAM_7_SWITCH_OFFSET);
    addr_hit[65] = (reg_addr == POWER_MANAGER_RAM_7_WAIT_ACK_SWITCH_ON_OFFSET);
    addr_hit[66] = (reg_addr == POWER_MANAGER_RAM_7_ISO_OFFSET);
    addr_hit[67] = (reg_addr == POWER_MANAGER_RAM_7_RETENTIVE_OFFSET);
    addr_hit[68] = (reg_addr == POWER_MANAGER_RAM_8_CLK_GATE_OFFSET);
    addr_hit[69] = (reg_addr == POWER_MANAGER_POWER_GATE_RAM_BLOCK_8_ACK_OFFSET);
    addr_hit[70] = (reg_addr == POWER_MANAGER_RAM_8_SWITCH_OFFSET);
    addr_hit[71] = (reg_addr == POWER_MANAGER_RAM_8_WAIT_ACK_SWITCH_ON_OFFSET);
    addr_hit[72] = (reg_addr == POWER_MANAGER_RAM_8_ISO_OFFSET);
    addr_hit[73] = (reg_addr == POWER_MANAGER_RAM_8_RETENTIVE_OFFSET);
    addr_hit[74] = (reg_addr == POWER_MANAGER_RAM_9_CLK_GATE_OFFSET);
    addr_hit[75] = (reg_addr == POWER_MANAGER_POWER_GATE_RAM_BLOCK_9_ACK_OFFSET);
    addr_hit[76] = (reg_addr == POWER_MANAGER_RAM_9_SWITCH_OFFSET);
    addr_hit[77] = (reg_addr == POWER_MANAGER_RAM_9_WAIT_ACK_SWITCH_ON_OFFSET);
    addr_hit[78] = (reg_addr == POWER_MANAGER_RAM_9_ISO_OFFSET);
    addr_hit[79] = (reg_addr == POWER_MANAGER_RAM_9_RETENTIVE_OFFSET);
    addr_hit[80] = (reg_addr == POWER_MANAGER_RAM_10_CLK_GATE_OFFSET);
    addr_hit[81] = (reg_addr == POWER_MANAGER_POWER_GATE_RAM_BLOCK_10_ACK_OFFSET);
    addr_hit[82] = (reg_addr == POWER_MANAGER_RAM_10_SWITCH_OFFSET);
    addr_hit[83] = (reg_addr == POWER_MANAGER_RAM_10_WAIT_ACK_SWITCH_ON_OFFSET);
    addr_hit[84] = (reg_addr == POWER_MANAGER_RAM_10_ISO_OFFSET);
    addr_hit[85] = (reg_addr == POWER_MANAGER_RAM_10_RETENTIVE_OFFSET);
    addr_hit[86] = (reg_addr == POWER_MANAGER_RAM_11_CLK_GATE_OFFSET);
    addr_hit[87] = (reg_addr == POWER_MANAGER_POWER_GATE_RAM_BLOCK_11_ACK_OFFSET);
    addr_hit[88] = (reg_addr == POWER_MANAGER_RAM_11_SWITCH_OFFSET);
    addr_hit[89] = (reg_addr == POWER_MANAGER_RAM_11_WAIT_ACK_SWITCH_ON_OFFSET);
    addr_hit[90] = (reg_addr == POWER_MANAGER_RAM_11_ISO_OFFSET);
    addr_hit[91] = (reg_addr == POWER_MANAGER_RAM_11_RETENTIVE_OFFSET);
    addr_hit[92] = (reg_addr == POWER_MANAGER_POWER_GATE_EXTERNAL_0_ACK_OFFSET);
    addr_hit[93] = (reg_addr == POWER_MANAGER_EXTERNAL_0_RESET_OFFSET);
    addr_hit[94] = (reg_addr == POWER_MANAGER_EXTERNAL_0_SWITCH_OFFSET);
    addr_hit[95] = (reg_addr == POWER_MANAGER_EXTERNAL_0_WAIT_ACK_SWITCH_ON_OFFSET);
    addr_hit[96] = (reg_addr == POWER_MANAGER_EXTERNAL_0_ISO_OFFSET);
    addr_hit[97] = (reg_addr == POWER_MANAGER_EXTERNAL_RAM_0_RETENTIVE_OFFSET);
    addr_hit[98] = (reg_addr == POWER_MANAGER_MONITOR_POWER_GATE_CORE_OFFSET);
    addr_hit[99] = (reg_addr == POWER_MANAGER_MONITOR_POWER_GATE_PERIPH_OFFSET);
    addr_hit[100] = (reg_addr == POWER_MANAGER_MONITOR_POWER_GATE_RAM_BLOCK_0_OFFSET);
    addr_hit[101] = (reg_addr == POWER_MANAGER_MONITOR_POWER_GATE_RAM_BLOCK_1_OFFSET);
    addr_hit[102] = (reg_addr == POWER_MANAGER_MONITOR_POWER_GATE_RAM_BLOCK_2_OFFSET);
    addr_hit[103] = (reg_addr == POWER_MANAGER_MONITOR_POWER_GATE_RAM_BLOCK_3_OFFSET);
    addr_hit[104] = (reg_addr == POWER_MANAGER_MONITOR_POWER_GATE_RAM_BLOCK_4_OFFSET);
    addr_hit[105] = (reg_addr == POWER_MANAGER_MONITOR_POWER_GATE_RAM_BLOCK_5_OFFSET);
    addr_hit[106] = (reg_addr == POWER_MANAGER_MONITOR_POWER_GATE_RAM_BLOCK_6_OFFSET);
    addr_hit[107] = (reg_addr == POWER_MANAGER_MONITOR_POWER_GATE_RAM_BLOCK_7_OFFSET);
    addr_hit[108] = (reg_addr == POWER_MANAGER_MONITOR_POWER_GATE_RAM_BLOCK_8_OFFSET);
    addr_hit[109] = (reg_addr == POWER_MANAGER_MONITOR_POWER_GATE_RAM_BLOCK_9_OFFSET);
    addr_hit[110] = (reg_addr == POWER_MANAGER_MONITOR_POWER_GATE_RAM_BLOCK_10_OFFSET);
    addr_hit[111] = (reg_addr == POWER_MANAGER_MONITOR_POWER_GATE_RAM_BLOCK_11_OFFSET);
    addr_hit[112] = (reg_addr == POWER_MANAGER_MONITOR_POWER_GATE_EXTERNAL_0_OFFSET);
    addr_hit[113] = (reg_addr == POWER_MANAGER_MASTER_CPU_FORCE_SWITCH_OFF_OFFSET);
    addr_hit[114] = (reg_addr == POWER_MANAGER_MASTER_CPU_FORCE_SWITCH_ON_OFFSET);
    addr_hit[115] = (reg_addr == POWER_MANAGER_MASTER_CPU_FORCE_RESET_ASSERT_OFFSET);
    addr_hit[116] = (reg_addr == POWER_MANAGER_MASTER_CPU_FORCE_RESET_DEASSERT_OFFSET);
    addr_hit[117] = (reg_addr == POWER_MANAGER_MASTER_CPU_FORCE_ISO_OFF_OFFSET);
    addr_hit[118] = (reg_addr == POWER_MANAGER_MASTER_CPU_FORCE_ISO_ON_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[  0] & (|(POWER_MANAGER_PERMIT[  0] & ~reg_be))) |
               (addr_hit[  1] & (|(POWER_MANAGER_PERMIT[  1] & ~reg_be))) |
               (addr_hit[  2] & (|(POWER_MANAGER_PERMIT[  2] & ~reg_be))) |
               (addr_hit[  3] & (|(POWER_MANAGER_PERMIT[  3] & ~reg_be))) |
               (addr_hit[  4] & (|(POWER_MANAGER_PERMIT[  4] & ~reg_be))) |
               (addr_hit[  5] & (|(POWER_MANAGER_PERMIT[  5] & ~reg_be))) |
               (addr_hit[  6] & (|(POWER_MANAGER_PERMIT[  6] & ~reg_be))) |
               (addr_hit[  7] & (|(POWER_MANAGER_PERMIT[  7] & ~reg_be))) |
               (addr_hit[  8] & (|(POWER_MANAGER_PERMIT[  8] & ~reg_be))) |
               (addr_hit[  9] & (|(POWER_MANAGER_PERMIT[  9] & ~reg_be))) |
               (addr_hit[ 10] & (|(POWER_MANAGER_PERMIT[ 10] & ~reg_be))) |
               (addr_hit[ 11] & (|(POWER_MANAGER_PERMIT[ 11] & ~reg_be))) |
               (addr_hit[ 12] & (|(POWER_MANAGER_PERMIT[ 12] & ~reg_be))) |
               (addr_hit[ 13] & (|(POWER_MANAGER_PERMIT[ 13] & ~reg_be))) |
               (addr_hit[ 14] & (|(POWER_MANAGER_PERMIT[ 14] & ~reg_be))) |
               (addr_hit[ 15] & (|(POWER_MANAGER_PERMIT[ 15] & ~reg_be))) |
               (addr_hit[ 16] & (|(POWER_MANAGER_PERMIT[ 16] & ~reg_be))) |
               (addr_hit[ 17] & (|(POWER_MANAGER_PERMIT[ 17] & ~reg_be))) |
               (addr_hit[ 18] & (|(POWER_MANAGER_PERMIT[ 18] & ~reg_be))) |
               (addr_hit[ 19] & (|(POWER_MANAGER_PERMIT[ 19] & ~reg_be))) |
               (addr_hit[ 20] & (|(POWER_MANAGER_PERMIT[ 20] & ~reg_be))) |
               (addr_hit[ 21] & (|(POWER_MANAGER_PERMIT[ 21] & ~reg_be))) |
               (addr_hit[ 22] & (|(POWER_MANAGER_PERMIT[ 22] & ~reg_be))) |
               (addr_hit[ 23] & (|(POWER_MANAGER_PERMIT[ 23] & ~reg_be))) |
               (addr_hit[ 24] & (|(POWER_MANAGER_PERMIT[ 24] & ~reg_be))) |
               (addr_hit[ 25] & (|(POWER_MANAGER_PERMIT[ 25] & ~reg_be))) |
               (addr_hit[ 26] & (|(POWER_MANAGER_PERMIT[ 26] & ~reg_be))) |
               (addr_hit[ 27] & (|(POWER_MANAGER_PERMIT[ 27] & ~reg_be))) |
               (addr_hit[ 28] & (|(POWER_MANAGER_PERMIT[ 28] & ~reg_be))) |
               (addr_hit[ 29] & (|(POWER_MANAGER_PERMIT[ 29] & ~reg_be))) |
               (addr_hit[ 30] & (|(POWER_MANAGER_PERMIT[ 30] & ~reg_be))) |
               (addr_hit[ 31] & (|(POWER_MANAGER_PERMIT[ 31] & ~reg_be))) |
               (addr_hit[ 32] & (|(POWER_MANAGER_PERMIT[ 32] & ~reg_be))) |
               (addr_hit[ 33] & (|(POWER_MANAGER_PERMIT[ 33] & ~reg_be))) |
               (addr_hit[ 34] & (|(POWER_MANAGER_PERMIT[ 34] & ~reg_be))) |
               (addr_hit[ 35] & (|(POWER_MANAGER_PERMIT[ 35] & ~reg_be))) |
               (addr_hit[ 36] & (|(POWER_MANAGER_PERMIT[ 36] & ~reg_be))) |
               (addr_hit[ 37] & (|(POWER_MANAGER_PERMIT[ 37] & ~reg_be))) |
               (addr_hit[ 38] & (|(POWER_MANAGER_PERMIT[ 38] & ~reg_be))) |
               (addr_hit[ 39] & (|(POWER_MANAGER_PERMIT[ 39] & ~reg_be))) |
               (addr_hit[ 40] & (|(POWER_MANAGER_PERMIT[ 40] & ~reg_be))) |
               (addr_hit[ 41] & (|(POWER_MANAGER_PERMIT[ 41] & ~reg_be))) |
               (addr_hit[ 42] & (|(POWER_MANAGER_PERMIT[ 42] & ~reg_be))) |
               (addr_hit[ 43] & (|(POWER_MANAGER_PERMIT[ 43] & ~reg_be))) |
               (addr_hit[ 44] & (|(POWER_MANAGER_PERMIT[ 44] & ~reg_be))) |
               (addr_hit[ 45] & (|(POWER_MANAGER_PERMIT[ 45] & ~reg_be))) |
               (addr_hit[ 46] & (|(POWER_MANAGER_PERMIT[ 46] & ~reg_be))) |
               (addr_hit[ 47] & (|(POWER_MANAGER_PERMIT[ 47] & ~reg_be))) |
               (addr_hit[ 48] & (|(POWER_MANAGER_PERMIT[ 48] & ~reg_be))) |
               (addr_hit[ 49] & (|(POWER_MANAGER_PERMIT[ 49] & ~reg_be))) |
               (addr_hit[ 50] & (|(POWER_MANAGER_PERMIT[ 50] & ~reg_be))) |
               (addr_hit[ 51] & (|(POWER_MANAGER_PERMIT[ 51] & ~reg_be))) |
               (addr_hit[ 52] & (|(POWER_MANAGER_PERMIT[ 52] & ~reg_be))) |
               (addr_hit[ 53] & (|(POWER_MANAGER_PERMIT[ 53] & ~reg_be))) |
               (addr_hit[ 54] & (|(POWER_MANAGER_PERMIT[ 54] & ~reg_be))) |
               (addr_hit[ 55] & (|(POWER_MANAGER_PERMIT[ 55] & ~reg_be))) |
               (addr_hit[ 56] & (|(POWER_MANAGER_PERMIT[ 56] & ~reg_be))) |
               (addr_hit[ 57] & (|(POWER_MANAGER_PERMIT[ 57] & ~reg_be))) |
               (addr_hit[ 58] & (|(POWER_MANAGER_PERMIT[ 58] & ~reg_be))) |
               (addr_hit[ 59] & (|(POWER_MANAGER_PERMIT[ 59] & ~reg_be))) |
               (addr_hit[ 60] & (|(POWER_MANAGER_PERMIT[ 60] & ~reg_be))) |
               (addr_hit[ 61] & (|(POWER_MANAGER_PERMIT[ 61] & ~reg_be))) |
               (addr_hit[ 62] & (|(POWER_MANAGER_PERMIT[ 62] & ~reg_be))) |
               (addr_hit[ 63] & (|(POWER_MANAGER_PERMIT[ 63] & ~reg_be))) |
               (addr_hit[ 64] & (|(POWER_MANAGER_PERMIT[ 64] & ~reg_be))) |
               (addr_hit[ 65] & (|(POWER_MANAGER_PERMIT[ 65] & ~reg_be))) |
               (addr_hit[ 66] & (|(POWER_MANAGER_PERMIT[ 66] & ~reg_be))) |
               (addr_hit[ 67] & (|(POWER_MANAGER_PERMIT[ 67] & ~reg_be))) |
               (addr_hit[ 68] & (|(POWER_MANAGER_PERMIT[ 68] & ~reg_be))) |
               (addr_hit[ 69] & (|(POWER_MANAGER_PERMIT[ 69] & ~reg_be))) |
               (addr_hit[ 70] & (|(POWER_MANAGER_PERMIT[ 70] & ~reg_be))) |
               (addr_hit[ 71] & (|(POWER_MANAGER_PERMIT[ 71] & ~reg_be))) |
               (addr_hit[ 72] & (|(POWER_MANAGER_PERMIT[ 72] & ~reg_be))) |
               (addr_hit[ 73] & (|(POWER_MANAGER_PERMIT[ 73] & ~reg_be))) |
               (addr_hit[ 74] & (|(POWER_MANAGER_PERMIT[ 74] & ~reg_be))) |
               (addr_hit[ 75] & (|(POWER_MANAGER_PERMIT[ 75] & ~reg_be))) |
               (addr_hit[ 76] & (|(POWER_MANAGER_PERMIT[ 76] & ~reg_be))) |
               (addr_hit[ 77] & (|(POWER_MANAGER_PERMIT[ 77] & ~reg_be))) |
               (addr_hit[ 78] & (|(POWER_MANAGER_PERMIT[ 78] & ~reg_be))) |
               (addr_hit[ 79] & (|(POWER_MANAGER_PERMIT[ 79] & ~reg_be))) |
               (addr_hit[ 80] & (|(POWER_MANAGER_PERMIT[ 80] & ~reg_be))) |
               (addr_hit[ 81] & (|(POWER_MANAGER_PERMIT[ 81] & ~reg_be))) |
               (addr_hit[ 82] & (|(POWER_MANAGER_PERMIT[ 82] & ~reg_be))) |
               (addr_hit[ 83] & (|(POWER_MANAGER_PERMIT[ 83] & ~reg_be))) |
               (addr_hit[ 84] & (|(POWER_MANAGER_PERMIT[ 84] & ~reg_be))) |
               (addr_hit[ 85] & (|(POWER_MANAGER_PERMIT[ 85] & ~reg_be))) |
               (addr_hit[ 86] & (|(POWER_MANAGER_PERMIT[ 86] & ~reg_be))) |
               (addr_hit[ 87] & (|(POWER_MANAGER_PERMIT[ 87] & ~reg_be))) |
               (addr_hit[ 88] & (|(POWER_MANAGER_PERMIT[ 88] & ~reg_be))) |
               (addr_hit[ 89] & (|(POWER_MANAGER_PERMIT[ 89] & ~reg_be))) |
               (addr_hit[ 90] & (|(POWER_MANAGER_PERMIT[ 90] & ~reg_be))) |
               (addr_hit[ 91] & (|(POWER_MANAGER_PERMIT[ 91] & ~reg_be))) |
               (addr_hit[ 92] & (|(POWER_MANAGER_PERMIT[ 92] & ~reg_be))) |
               (addr_hit[ 93] & (|(POWER_MANAGER_PERMIT[ 93] & ~reg_be))) |
               (addr_hit[ 94] & (|(POWER_MANAGER_PERMIT[ 94] & ~reg_be))) |
               (addr_hit[ 95] & (|(POWER_MANAGER_PERMIT[ 95] & ~reg_be))) |
               (addr_hit[ 96] & (|(POWER_MANAGER_PERMIT[ 96] & ~reg_be))) |
               (addr_hit[ 97] & (|(POWER_MANAGER_PERMIT[ 97] & ~reg_be))) |
               (addr_hit[ 98] & (|(POWER_MANAGER_PERMIT[ 98] & ~reg_be))) |
               (addr_hit[ 99] & (|(POWER_MANAGER_PERMIT[ 99] & ~reg_be))) |
               (addr_hit[100] & (|(POWER_MANAGER_PERMIT[100] & ~reg_be))) |
               (addr_hit[101] & (|(POWER_MANAGER_PERMIT[101] & ~reg_be))) |
               (addr_hit[102] & (|(POWER_MANAGER_PERMIT[102] & ~reg_be))) |
               (addr_hit[103] & (|(POWER_MANAGER_PERMIT[103] & ~reg_be))) |
               (addr_hit[104] & (|(POWER_MANAGER_PERMIT[104] & ~reg_be))) |
               (addr_hit[105] & (|(POWER_MANAGER_PERMIT[105] & ~reg_be))) |
               (addr_hit[106] & (|(POWER_MANAGER_PERMIT[106] & ~reg_be))) |
               (addr_hit[107] & (|(POWER_MANAGER_PERMIT[107] & ~reg_be))) |
               (addr_hit[108] & (|(POWER_MANAGER_PERMIT[108] & ~reg_be))) |
               (addr_hit[109] & (|(POWER_MANAGER_PERMIT[109] & ~reg_be))) |
               (addr_hit[110] & (|(POWER_MANAGER_PERMIT[110] & ~reg_be))) |
               (addr_hit[111] & (|(POWER_MANAGER_PERMIT[111] & ~reg_be))) |
               (addr_hit[112] & (|(POWER_MANAGER_PERMIT[112] & ~reg_be))) |
               (addr_hit[113] & (|(POWER_MANAGER_PERMIT[113] & ~reg_be))) |
               (addr_hit[114] & (|(POWER_MANAGER_PERMIT[114] & ~reg_be))) |
               (addr_hit[115] & (|(POWER_MANAGER_PERMIT[115] & ~reg_be))) |
               (addr_hit[116] & (|(POWER_MANAGER_PERMIT[116] & ~reg_be))) |
               (addr_hit[117] & (|(POWER_MANAGER_PERMIT[117] & ~reg_be))) |
               (addr_hit[118] & (|(POWER_MANAGER_PERMIT[118] & ~reg_be)))));
  end

  assign wakeup_state_we = addr_hit[0] & reg_we & !reg_error;
  assign wakeup_state_wd = reg_wdata[0];

  assign restore_address_we = addr_hit[1] & reg_we & !reg_error;
  assign restore_address_wd = reg_wdata[31:0];

  assign en_wait_for_intr_we = addr_hit[2] & reg_we & !reg_error;
  assign en_wait_for_intr_wd = reg_wdata[31:0];

  assign intr_state_we = addr_hit[3] & reg_we & !reg_error;
  assign intr_state_wd = reg_wdata[31:0];

  assign power_gate_core_we = addr_hit[4] & reg_we & !reg_error;
  assign power_gate_core_wd = reg_wdata[0];

  assign cpu_reset_assert_counter_we = addr_hit[6] & reg_we & !reg_error;
  assign cpu_reset_assert_counter_wd = reg_wdata[31:0];

  assign cpu_reset_deassert_counter_we = addr_hit[7] & reg_we & !reg_error;
  assign cpu_reset_deassert_counter_wd = reg_wdata[31:0];

  assign cpu_switch_off_counter_we = addr_hit[8] & reg_we & !reg_error;
  assign cpu_switch_off_counter_wd = reg_wdata[31:0];

  assign cpu_switch_on_counter_we = addr_hit[9] & reg_we & !reg_error;
  assign cpu_switch_on_counter_wd = reg_wdata[31:0];

  assign cpu_wait_ack_switch_on_counter_we = addr_hit[10] & reg_we & !reg_error;
  assign cpu_wait_ack_switch_on_counter_wd = reg_wdata[0];

  assign cpu_iso_off_counter_we = addr_hit[11] & reg_we & !reg_error;
  assign cpu_iso_off_counter_wd = reg_wdata[31:0];

  assign cpu_iso_on_counter_we = addr_hit[12] & reg_we & !reg_error;
  assign cpu_iso_on_counter_wd = reg_wdata[31:0];

  assign cpu_counters_stop_cpu_reset_assert_stop_bit_counter_we = addr_hit[13] & reg_we & !reg_error;
  assign cpu_counters_stop_cpu_reset_assert_stop_bit_counter_wd = reg_wdata[0];

  assign cpu_counters_stop_cpu_reset_deassert_stop_bit_counter_we = addr_hit[13] & reg_we & !reg_error;
  assign cpu_counters_stop_cpu_reset_deassert_stop_bit_counter_wd = reg_wdata[1];

  assign cpu_counters_stop_cpu_switch_off_stop_bit_counter_we = addr_hit[13] & reg_we & !reg_error;
  assign cpu_counters_stop_cpu_switch_off_stop_bit_counter_wd = reg_wdata[2];

  assign cpu_counters_stop_cpu_switch_on_stop_bit_counter_we = addr_hit[13] & reg_we & !reg_error;
  assign cpu_counters_stop_cpu_switch_on_stop_bit_counter_wd = reg_wdata[3];

  assign cpu_counters_stop_cpu_iso_off_stop_bit_counter_we = addr_hit[13] & reg_we & !reg_error;
  assign cpu_counters_stop_cpu_iso_off_stop_bit_counter_wd = reg_wdata[4];

  assign cpu_counters_stop_cpu_iso_on_stop_bit_counter_we = addr_hit[13] & reg_we & !reg_error;
  assign cpu_counters_stop_cpu_iso_on_stop_bit_counter_wd = reg_wdata[5];

  assign periph_reset_we = addr_hit[15] & reg_we & !reg_error;
  assign periph_reset_wd = reg_wdata[0];

  assign periph_switch_we = addr_hit[16] & reg_we & !reg_error;
  assign periph_switch_wd = reg_wdata[0];

  assign periph_wait_ack_switch_on_we = addr_hit[17] & reg_we & !reg_error;
  assign periph_wait_ack_switch_on_wd = reg_wdata[0];

  assign periph_iso_we = addr_hit[18] & reg_we & !reg_error;
  assign periph_iso_wd = reg_wdata[0];

  assign periph_clk_gate_we = addr_hit[19] & reg_we & !reg_error;
  assign periph_clk_gate_wd = reg_wdata[0];

  assign ram_0_clk_gate_we = addr_hit[20] & reg_we & !reg_error;
  assign ram_0_clk_gate_wd = reg_wdata[0];

  assign ram_0_switch_we = addr_hit[22] & reg_we & !reg_error;
  assign ram_0_switch_wd = reg_wdata[0];

  assign ram_0_wait_ack_switch_on_we = addr_hit[23] & reg_we & !reg_error;
  assign ram_0_wait_ack_switch_on_wd = reg_wdata[0];

  assign ram_0_iso_we = addr_hit[24] & reg_we & !reg_error;
  assign ram_0_iso_wd = reg_wdata[0];

  assign ram_0_retentive_we = addr_hit[25] & reg_we & !reg_error;
  assign ram_0_retentive_wd = reg_wdata[0];

  assign ram_1_clk_gate_we = addr_hit[26] & reg_we & !reg_error;
  assign ram_1_clk_gate_wd = reg_wdata[0];

  assign ram_1_switch_we = addr_hit[28] & reg_we & !reg_error;
  assign ram_1_switch_wd = reg_wdata[0];

  assign ram_1_wait_ack_switch_on_we = addr_hit[29] & reg_we & !reg_error;
  assign ram_1_wait_ack_switch_on_wd = reg_wdata[0];

  assign ram_1_iso_we = addr_hit[30] & reg_we & !reg_error;
  assign ram_1_iso_wd = reg_wdata[0];

  assign ram_1_retentive_we = addr_hit[31] & reg_we & !reg_error;
  assign ram_1_retentive_wd = reg_wdata[0];

  assign ram_2_clk_gate_we = addr_hit[32] & reg_we & !reg_error;
  assign ram_2_clk_gate_wd = reg_wdata[0];

  assign ram_2_switch_we = addr_hit[34] & reg_we & !reg_error;
  assign ram_2_switch_wd = reg_wdata[0];

  assign ram_2_wait_ack_switch_on_we = addr_hit[35] & reg_we & !reg_error;
  assign ram_2_wait_ack_switch_on_wd = reg_wdata[0];

  assign ram_2_iso_we = addr_hit[36] & reg_we & !reg_error;
  assign ram_2_iso_wd = reg_wdata[0];

  assign ram_2_retentive_we = addr_hit[37] & reg_we & !reg_error;
  assign ram_2_retentive_wd = reg_wdata[0];

  assign ram_3_clk_gate_we = addr_hit[38] & reg_we & !reg_error;
  assign ram_3_clk_gate_wd = reg_wdata[0];

  assign ram_3_switch_we = addr_hit[40] & reg_we & !reg_error;
  assign ram_3_switch_wd = reg_wdata[0];

  assign ram_3_wait_ack_switch_on_we = addr_hit[41] & reg_we & !reg_error;
  assign ram_3_wait_ack_switch_on_wd = reg_wdata[0];

  assign ram_3_iso_we = addr_hit[42] & reg_we & !reg_error;
  assign ram_3_iso_wd = reg_wdata[0];

  assign ram_3_retentive_we = addr_hit[43] & reg_we & !reg_error;
  assign ram_3_retentive_wd = reg_wdata[0];

  assign ram_4_clk_gate_we = addr_hit[44] & reg_we & !reg_error;
  assign ram_4_clk_gate_wd = reg_wdata[0];

  assign ram_4_switch_we = addr_hit[46] & reg_we & !reg_error;
  assign ram_4_switch_wd = reg_wdata[0];

  assign ram_4_wait_ack_switch_on_we = addr_hit[47] & reg_we & !reg_error;
  assign ram_4_wait_ack_switch_on_wd = reg_wdata[0];

  assign ram_4_iso_we = addr_hit[48] & reg_we & !reg_error;
  assign ram_4_iso_wd = reg_wdata[0];

  assign ram_4_retentive_we = addr_hit[49] & reg_we & !reg_error;
  assign ram_4_retentive_wd = reg_wdata[0];

  assign ram_5_clk_gate_we = addr_hit[50] & reg_we & !reg_error;
  assign ram_5_clk_gate_wd = reg_wdata[0];

  assign ram_5_switch_we = addr_hit[52] & reg_we & !reg_error;
  assign ram_5_switch_wd = reg_wdata[0];

  assign ram_5_wait_ack_switch_on_we = addr_hit[53] & reg_we & !reg_error;
  assign ram_5_wait_ack_switch_on_wd = reg_wdata[0];

  assign ram_5_iso_we = addr_hit[54] & reg_we & !reg_error;
  assign ram_5_iso_wd = reg_wdata[0];

  assign ram_5_retentive_we = addr_hit[55] & reg_we & !reg_error;
  assign ram_5_retentive_wd = reg_wdata[0];

  assign ram_6_clk_gate_we = addr_hit[56] & reg_we & !reg_error;
  assign ram_6_clk_gate_wd = reg_wdata[0];

  assign ram_6_switch_we = addr_hit[58] & reg_we & !reg_error;
  assign ram_6_switch_wd = reg_wdata[0];

  assign ram_6_wait_ack_switch_on_we = addr_hit[59] & reg_we & !reg_error;
  assign ram_6_wait_ack_switch_on_wd = reg_wdata[0];

  assign ram_6_iso_we = addr_hit[60] & reg_we & !reg_error;
  assign ram_6_iso_wd = reg_wdata[0];

  assign ram_6_retentive_we = addr_hit[61] & reg_we & !reg_error;
  assign ram_6_retentive_wd = reg_wdata[0];

  assign ram_7_clk_gate_we = addr_hit[62] & reg_we & !reg_error;
  assign ram_7_clk_gate_wd = reg_wdata[0];

  assign ram_7_switch_we = addr_hit[64] & reg_we & !reg_error;
  assign ram_7_switch_wd = reg_wdata[0];

  assign ram_7_wait_ack_switch_on_we = addr_hit[65] & reg_we & !reg_error;
  assign ram_7_wait_ack_switch_on_wd = reg_wdata[0];

  assign ram_7_iso_we = addr_hit[66] & reg_we & !reg_error;
  assign ram_7_iso_wd = reg_wdata[0];

  assign ram_7_retentive_we = addr_hit[67] & reg_we & !reg_error;
  assign ram_7_retentive_wd = reg_wdata[0];

  assign ram_8_clk_gate_we = addr_hit[68] & reg_we & !reg_error;
  assign ram_8_clk_gate_wd = reg_wdata[0];

  assign ram_8_switch_we = addr_hit[70] & reg_we & !reg_error;
  assign ram_8_switch_wd = reg_wdata[0];

  assign ram_8_wait_ack_switch_on_we = addr_hit[71] & reg_we & !reg_error;
  assign ram_8_wait_ack_switch_on_wd = reg_wdata[0];

  assign ram_8_iso_we = addr_hit[72] & reg_we & !reg_error;
  assign ram_8_iso_wd = reg_wdata[0];

  assign ram_8_retentive_we = addr_hit[73] & reg_we & !reg_error;
  assign ram_8_retentive_wd = reg_wdata[0];

  assign ram_9_clk_gate_we = addr_hit[74] & reg_we & !reg_error;
  assign ram_9_clk_gate_wd = reg_wdata[0];

  assign ram_9_switch_we = addr_hit[76] & reg_we & !reg_error;
  assign ram_9_switch_wd = reg_wdata[0];

  assign ram_9_wait_ack_switch_on_we = addr_hit[77] & reg_we & !reg_error;
  assign ram_9_wait_ack_switch_on_wd = reg_wdata[0];

  assign ram_9_iso_we = addr_hit[78] & reg_we & !reg_error;
  assign ram_9_iso_wd = reg_wdata[0];

  assign ram_9_retentive_we = addr_hit[79] & reg_we & !reg_error;
  assign ram_9_retentive_wd = reg_wdata[0];

  assign ram_10_clk_gate_we = addr_hit[80] & reg_we & !reg_error;
  assign ram_10_clk_gate_wd = reg_wdata[0];

  assign ram_10_switch_we = addr_hit[82] & reg_we & !reg_error;
  assign ram_10_switch_wd = reg_wdata[0];

  assign ram_10_wait_ack_switch_on_we = addr_hit[83] & reg_we & !reg_error;
  assign ram_10_wait_ack_switch_on_wd = reg_wdata[0];

  assign ram_10_iso_we = addr_hit[84] & reg_we & !reg_error;
  assign ram_10_iso_wd = reg_wdata[0];

  assign ram_10_retentive_we = addr_hit[85] & reg_we & !reg_error;
  assign ram_10_retentive_wd = reg_wdata[0];

  assign ram_11_clk_gate_we = addr_hit[86] & reg_we & !reg_error;
  assign ram_11_clk_gate_wd = reg_wdata[0];

  assign ram_11_switch_we = addr_hit[88] & reg_we & !reg_error;
  assign ram_11_switch_wd = reg_wdata[0];

  assign ram_11_wait_ack_switch_on_we = addr_hit[89] & reg_we & !reg_error;
  assign ram_11_wait_ack_switch_on_wd = reg_wdata[0];

  assign ram_11_iso_we = addr_hit[90] & reg_we & !reg_error;
  assign ram_11_iso_wd = reg_wdata[0];

  assign ram_11_retentive_we = addr_hit[91] & reg_we & !reg_error;
  assign ram_11_retentive_wd = reg_wdata[0];

  assign external_0_reset_we = addr_hit[93] & reg_we & !reg_error;
  assign external_0_reset_wd = reg_wdata[0];

  assign external_0_switch_we = addr_hit[94] & reg_we & !reg_error;
  assign external_0_switch_wd = reg_wdata[0];

  assign external_0_wait_ack_switch_on_we = addr_hit[95] & reg_we & !reg_error;
  assign external_0_wait_ack_switch_on_wd = reg_wdata[0];

  assign external_0_iso_we = addr_hit[96] & reg_we & !reg_error;
  assign external_0_iso_wd = reg_wdata[0];

  assign external_ram_0_retentive_we = addr_hit[97] & reg_we & !reg_error;
  assign external_ram_0_retentive_wd = reg_wdata[0];

  assign master_cpu_force_switch_off_we = addr_hit[113] & reg_we & !reg_error;
  assign master_cpu_force_switch_off_wd = reg_wdata[0];

  assign master_cpu_force_switch_on_we = addr_hit[114] & reg_we & !reg_error;
  assign master_cpu_force_switch_on_wd = reg_wdata[0];

  assign master_cpu_force_reset_assert_we = addr_hit[115] & reg_we & !reg_error;
  assign master_cpu_force_reset_assert_wd = reg_wdata[0];

  assign master_cpu_force_reset_deassert_we = addr_hit[116] & reg_we & !reg_error;
  assign master_cpu_force_reset_deassert_wd = reg_wdata[0];

  assign master_cpu_force_iso_off_we = addr_hit[117] & reg_we & !reg_error;
  assign master_cpu_force_iso_off_wd = reg_wdata[0];

  assign master_cpu_force_iso_on_we = addr_hit[118] & reg_we & !reg_error;
  assign master_cpu_force_iso_on_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = wakeup_state_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = restore_address_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = en_wait_for_intr_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = intr_state_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = power_gate_core_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = power_gate_core_ack_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = cpu_reset_assert_counter_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = cpu_reset_deassert_counter_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = cpu_switch_off_counter_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = cpu_switch_on_counter_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = cpu_wait_ack_switch_on_counter_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = cpu_iso_off_counter_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = cpu_iso_on_counter_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = cpu_counters_stop_cpu_reset_assert_stop_bit_counter_qs;
        reg_rdata_next[1] = cpu_counters_stop_cpu_reset_deassert_stop_bit_counter_qs;
        reg_rdata_next[2] = cpu_counters_stop_cpu_switch_off_stop_bit_counter_qs;
        reg_rdata_next[3] = cpu_counters_stop_cpu_switch_on_stop_bit_counter_qs;
        reg_rdata_next[4] = cpu_counters_stop_cpu_iso_off_stop_bit_counter_qs;
        reg_rdata_next[5] = cpu_counters_stop_cpu_iso_on_stop_bit_counter_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = power_gate_periph_ack_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[0] = periph_reset_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[0] = periph_switch_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[0] = periph_wait_ack_switch_on_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[0] = periph_iso_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[0] = periph_clk_gate_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[0] = ram_0_clk_gate_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[0] = power_gate_ram_block_0_ack_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[0] = ram_0_switch_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[0] = ram_0_wait_ack_switch_on_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[0] = ram_0_iso_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[0] = ram_0_retentive_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[0] = ram_1_clk_gate_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[0] = power_gate_ram_block_1_ack_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[0] = ram_1_switch_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[0] = ram_1_wait_ack_switch_on_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[0] = ram_1_iso_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[0] = ram_1_retentive_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[0] = ram_2_clk_gate_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[0] = power_gate_ram_block_2_ack_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[0] = ram_2_switch_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[0] = ram_2_wait_ack_switch_on_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[0] = ram_2_iso_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[0] = ram_2_retentive_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[0] = ram_3_clk_gate_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[0] = power_gate_ram_block_3_ack_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[0] = ram_3_switch_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[0] = ram_3_wait_ack_switch_on_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[0] = ram_3_iso_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[0] = ram_3_retentive_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[0] = ram_4_clk_gate_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[0] = power_gate_ram_block_4_ack_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[0] = ram_4_switch_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[0] = ram_4_wait_ack_switch_on_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[0] = ram_4_iso_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[0] = ram_4_retentive_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[0] = ram_5_clk_gate_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[0] = power_gate_ram_block_5_ack_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[0] = ram_5_switch_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[0] = ram_5_wait_ack_switch_on_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[0] = ram_5_iso_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[0] = ram_5_retentive_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[0] = ram_6_clk_gate_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[0] = power_gate_ram_block_6_ack_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[0] = ram_6_switch_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[0] = ram_6_wait_ack_switch_on_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[0] = ram_6_iso_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[0] = ram_6_retentive_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[0] = ram_7_clk_gate_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[0] = power_gate_ram_block_7_ack_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[0] = ram_7_switch_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[0] = ram_7_wait_ack_switch_on_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[0] = ram_7_iso_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[0] = ram_7_retentive_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[0] = ram_8_clk_gate_qs;
      end

      addr_hit[69]: begin
        reg_rdata_next[0] = power_gate_ram_block_8_ack_qs;
      end

      addr_hit[70]: begin
        reg_rdata_next[0] = ram_8_switch_qs;
      end

      addr_hit[71]: begin
        reg_rdata_next[0] = ram_8_wait_ack_switch_on_qs;
      end

      addr_hit[72]: begin
        reg_rdata_next[0] = ram_8_iso_qs;
      end

      addr_hit[73]: begin
        reg_rdata_next[0] = ram_8_retentive_qs;
      end

      addr_hit[74]: begin
        reg_rdata_next[0] = ram_9_clk_gate_qs;
      end

      addr_hit[75]: begin
        reg_rdata_next[0] = power_gate_ram_block_9_ack_qs;
      end

      addr_hit[76]: begin
        reg_rdata_next[0] = ram_9_switch_qs;
      end

      addr_hit[77]: begin
        reg_rdata_next[0] = ram_9_wait_ack_switch_on_qs;
      end

      addr_hit[78]: begin
        reg_rdata_next[0] = ram_9_iso_qs;
      end

      addr_hit[79]: begin
        reg_rdata_next[0] = ram_9_retentive_qs;
      end

      addr_hit[80]: begin
        reg_rdata_next[0] = ram_10_clk_gate_qs;
      end

      addr_hit[81]: begin
        reg_rdata_next[0] = power_gate_ram_block_10_ack_qs;
      end

      addr_hit[82]: begin
        reg_rdata_next[0] = ram_10_switch_qs;
      end

      addr_hit[83]: begin
        reg_rdata_next[0] = ram_10_wait_ack_switch_on_qs;
      end

      addr_hit[84]: begin
        reg_rdata_next[0] = ram_10_iso_qs;
      end

      addr_hit[85]: begin
        reg_rdata_next[0] = ram_10_retentive_qs;
      end

      addr_hit[86]: begin
        reg_rdata_next[0] = ram_11_clk_gate_qs;
      end

      addr_hit[87]: begin
        reg_rdata_next[0] = power_gate_ram_block_11_ack_qs;
      end

      addr_hit[88]: begin
        reg_rdata_next[0] = ram_11_switch_qs;
      end

      addr_hit[89]: begin
        reg_rdata_next[0] = ram_11_wait_ack_switch_on_qs;
      end

      addr_hit[90]: begin
        reg_rdata_next[0] = ram_11_iso_qs;
      end

      addr_hit[91]: begin
        reg_rdata_next[0] = ram_11_retentive_qs;
      end

      addr_hit[92]: begin
        reg_rdata_next[0] = power_gate_external_0_ack_qs;
      end

      addr_hit[93]: begin
        reg_rdata_next[0] = external_0_reset_qs;
      end

      addr_hit[94]: begin
        reg_rdata_next[0] = external_0_switch_qs;
      end

      addr_hit[95]: begin
        reg_rdata_next[0] = external_0_wait_ack_switch_on_qs;
      end

      addr_hit[96]: begin
        reg_rdata_next[0] = external_0_iso_qs;
      end

      addr_hit[97]: begin
        reg_rdata_next[0] = external_ram_0_retentive_qs;
      end

      addr_hit[98]: begin
        reg_rdata_next[2:0] = monitor_power_gate_core_qs;
      end

      addr_hit[99]: begin
        reg_rdata_next[2:0] = monitor_power_gate_periph_qs;
      end

      addr_hit[100]: begin
        reg_rdata_next[1:0] = monitor_power_gate_ram_block_0_qs;
      end

      addr_hit[101]: begin
        reg_rdata_next[1:0] = monitor_power_gate_ram_block_1_qs;
      end

      addr_hit[102]: begin
        reg_rdata_next[1:0] = monitor_power_gate_ram_block_2_qs;
      end

      addr_hit[103]: begin
        reg_rdata_next[1:0] = monitor_power_gate_ram_block_3_qs;
      end

      addr_hit[104]: begin
        reg_rdata_next[1:0] = monitor_power_gate_ram_block_4_qs;
      end

      addr_hit[105]: begin
        reg_rdata_next[1:0] = monitor_power_gate_ram_block_5_qs;
      end

      addr_hit[106]: begin
        reg_rdata_next[1:0] = monitor_power_gate_ram_block_6_qs;
      end

      addr_hit[107]: begin
        reg_rdata_next[1:0] = monitor_power_gate_ram_block_7_qs;
      end

      addr_hit[108]: begin
        reg_rdata_next[1:0] = monitor_power_gate_ram_block_8_qs;
      end

      addr_hit[109]: begin
        reg_rdata_next[1:0] = monitor_power_gate_ram_block_9_qs;
      end

      addr_hit[110]: begin
        reg_rdata_next[1:0] = monitor_power_gate_ram_block_10_qs;
      end

      addr_hit[111]: begin
        reg_rdata_next[1:0] = monitor_power_gate_ram_block_11_qs;
      end

      addr_hit[112]: begin
        reg_rdata_next[2:0] = monitor_power_gate_external_0_qs;
      end

      addr_hit[113]: begin
        reg_rdata_next[0] = master_cpu_force_switch_off_qs;
      end

      addr_hit[114]: begin
        reg_rdata_next[0] = master_cpu_force_switch_on_qs;
      end

      addr_hit[115]: begin
        reg_rdata_next[0] = master_cpu_force_reset_assert_qs;
      end

      addr_hit[116]: begin
        reg_rdata_next[0] = master_cpu_force_reset_deassert_qs;
      end

      addr_hit[117]: begin
        reg_rdata_next[0] = master_cpu_force_iso_off_qs;
      end

      addr_hit[118]: begin
        reg_rdata_next[0] = master_cpu_force_iso_on_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module power_manager_reg_top_intf #(
    parameter  int AW = 9,
    localparam int DW = 32
) (
    input logic clk_i,
    input logic rst_ni,
    REG_BUS.in regbus_slave,
    // To HW
    output power_manager_reg_pkg::power_manager_reg2hw_t reg2hw,  // Write
    input power_manager_reg_pkg::power_manager_hw2reg_t hw2reg,  // Read
    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);
  localparam int unsigned STRB_WIDTH = DW / 8;

  `include "register_interface/typedef.svh"
  `include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;

  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)



  power_manager_reg_top #(
      .reg_req_t(reg_bus_req_t),
      .reg_rsp_t(reg_bus_rsp_t),
      .AW(AW)
  ) i_regs (
      .clk_i,
      .rst_ni,
      .reg_req_i(s_reg_req),
      .reg_rsp_o(s_reg_rsp),
      .reg2hw,  // Write
      .hw2reg,  // Read
      .devmode_i
  );

endmodule


