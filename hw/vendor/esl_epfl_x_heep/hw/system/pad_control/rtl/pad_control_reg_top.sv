// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module pad_control_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 6
) (
    input logic clk_i,
    input logic rst_ni,
    input reg_req_t reg_req_i,
    output reg_rsp_t reg_rsp_o,
    // To HW
    output pad_control_reg_pkg::pad_control_reg2hw_t reg2hw,  // Write


    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);

  import pad_control_reg_pkg::*;

  localparam int DW = 32;
  localparam int DBW = DW / 8;  // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [ AW-1:0] reg_addr;
  logic [ DW-1:0] reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [ DW-1:0] reg_rdata;
  logic           reg_error;

  logic addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic pad_mux_pdm2pcm_pdm_qs;
  logic pad_mux_pdm2pcm_pdm_wd;
  logic pad_mux_pdm2pcm_pdm_we;
  logic pad_mux_pdm2pcm_clk_qs;
  logic pad_mux_pdm2pcm_clk_wd;
  logic pad_mux_pdm2pcm_clk_we;
  logic pad_mux_i2s_sck_qs;
  logic pad_mux_i2s_sck_wd;
  logic pad_mux_i2s_sck_we;
  logic pad_mux_i2s_ws_qs;
  logic pad_mux_i2s_ws_wd;
  logic pad_mux_i2s_ws_we;
  logic pad_mux_i2s_sd_qs;
  logic pad_mux_i2s_sd_wd;
  logic pad_mux_i2s_sd_we;
  logic pad_mux_spi2_cs_0_qs;
  logic pad_mux_spi2_cs_0_wd;
  logic pad_mux_spi2_cs_0_we;
  logic pad_mux_spi2_cs_1_qs;
  logic pad_mux_spi2_cs_1_wd;
  logic pad_mux_spi2_cs_1_we;
  logic pad_mux_spi2_sck_qs;
  logic pad_mux_spi2_sck_wd;
  logic pad_mux_spi2_sck_we;
  logic pad_mux_spi2_sd_0_qs;
  logic pad_mux_spi2_sd_0_wd;
  logic pad_mux_spi2_sd_0_we;
  logic pad_mux_spi2_sd_1_qs;
  logic pad_mux_spi2_sd_1_wd;
  logic pad_mux_spi2_sd_1_we;
  logic pad_mux_spi2_sd_2_qs;
  logic pad_mux_spi2_sd_2_wd;
  logic pad_mux_spi2_sd_2_we;
  logic pad_mux_spi2_sd_3_qs;
  logic pad_mux_spi2_sd_3_wd;
  logic pad_mux_spi2_sd_3_we;
  logic pad_mux_i2c_scl_qs;
  logic pad_mux_i2c_scl_wd;
  logic pad_mux_i2c_scl_we;
  logic pad_mux_i2c_sda_qs;
  logic pad_mux_i2c_sda_wd;
  logic pad_mux_i2c_sda_we;

  // Register instances
  // R[pad_mux_pdm2pcm_pdm]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_mux_pdm2pcm_pdm (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_mux_pdm2pcm_pdm_we),
      .wd(pad_mux_pdm2pcm_pdm_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_mux_pdm2pcm_pdm.q),

      // to register interface (read)
      .qs(pad_mux_pdm2pcm_pdm_qs)
  );


  // R[pad_mux_pdm2pcm_clk]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_mux_pdm2pcm_clk (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_mux_pdm2pcm_clk_we),
      .wd(pad_mux_pdm2pcm_clk_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_mux_pdm2pcm_clk.q),

      // to register interface (read)
      .qs(pad_mux_pdm2pcm_clk_qs)
  );


  // R[pad_mux_i2s_sck]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_mux_i2s_sck (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_mux_i2s_sck_we),
      .wd(pad_mux_i2s_sck_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_mux_i2s_sck.q),

      // to register interface (read)
      .qs(pad_mux_i2s_sck_qs)
  );


  // R[pad_mux_i2s_ws]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_mux_i2s_ws (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_mux_i2s_ws_we),
      .wd(pad_mux_i2s_ws_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_mux_i2s_ws.q),

      // to register interface (read)
      .qs(pad_mux_i2s_ws_qs)
  );


  // R[pad_mux_i2s_sd]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_mux_i2s_sd (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_mux_i2s_sd_we),
      .wd(pad_mux_i2s_sd_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_mux_i2s_sd.q),

      // to register interface (read)
      .qs(pad_mux_i2s_sd_qs)
  );


  // R[pad_mux_spi2_cs_0]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_mux_spi2_cs_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_mux_spi2_cs_0_we),
      .wd(pad_mux_spi2_cs_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_mux_spi2_cs_0.q),

      // to register interface (read)
      .qs(pad_mux_spi2_cs_0_qs)
  );


  // R[pad_mux_spi2_cs_1]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_mux_spi2_cs_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_mux_spi2_cs_1_we),
      .wd(pad_mux_spi2_cs_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_mux_spi2_cs_1.q),

      // to register interface (read)
      .qs(pad_mux_spi2_cs_1_qs)
  );


  // R[pad_mux_spi2_sck]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_mux_spi2_sck (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_mux_spi2_sck_we),
      .wd(pad_mux_spi2_sck_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_mux_spi2_sck.q),

      // to register interface (read)
      .qs(pad_mux_spi2_sck_qs)
  );


  // R[pad_mux_spi2_sd_0]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_mux_spi2_sd_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_mux_spi2_sd_0_we),
      .wd(pad_mux_spi2_sd_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_mux_spi2_sd_0.q),

      // to register interface (read)
      .qs(pad_mux_spi2_sd_0_qs)
  );


  // R[pad_mux_spi2_sd_1]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_mux_spi2_sd_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_mux_spi2_sd_1_we),
      .wd(pad_mux_spi2_sd_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_mux_spi2_sd_1.q),

      // to register interface (read)
      .qs(pad_mux_spi2_sd_1_qs)
  );


  // R[pad_mux_spi2_sd_2]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_mux_spi2_sd_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_mux_spi2_sd_2_we),
      .wd(pad_mux_spi2_sd_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_mux_spi2_sd_2.q),

      // to register interface (read)
      .qs(pad_mux_spi2_sd_2_qs)
  );


  // R[pad_mux_spi2_sd_3]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_mux_spi2_sd_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_mux_spi2_sd_3_we),
      .wd(pad_mux_spi2_sd_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_mux_spi2_sd_3.q),

      // to register interface (read)
      .qs(pad_mux_spi2_sd_3_qs)
  );


  // R[pad_mux_i2c_scl]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_mux_i2c_scl (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_mux_i2c_scl_we),
      .wd(pad_mux_i2c_scl_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_mux_i2c_scl.q),

      // to register interface (read)
      .qs(pad_mux_i2c_scl_qs)
  );


  // R[pad_mux_i2c_sda]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_mux_i2c_sda (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_mux_i2c_sda_we),
      .wd(pad_mux_i2c_sda_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_mux_i2c_sda.q),

      // to register interface (read)
      .qs(pad_mux_i2c_sda_qs)
  );




  logic [13:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == PAD_CONTROL_PAD_MUX_PDM2PCM_PDM_OFFSET);
    addr_hit[1] = (reg_addr == PAD_CONTROL_PAD_MUX_PDM2PCM_CLK_OFFSET);
    addr_hit[2] = (reg_addr == PAD_CONTROL_PAD_MUX_I2S_SCK_OFFSET);
    addr_hit[3] = (reg_addr == PAD_CONTROL_PAD_MUX_I2S_WS_OFFSET);
    addr_hit[4] = (reg_addr == PAD_CONTROL_PAD_MUX_I2S_SD_OFFSET);
    addr_hit[5] = (reg_addr == PAD_CONTROL_PAD_MUX_SPI2_CS_0_OFFSET);
    addr_hit[6] = (reg_addr == PAD_CONTROL_PAD_MUX_SPI2_CS_1_OFFSET);
    addr_hit[7] = (reg_addr == PAD_CONTROL_PAD_MUX_SPI2_SCK_OFFSET);
    addr_hit[8] = (reg_addr == PAD_CONTROL_PAD_MUX_SPI2_SD_0_OFFSET);
    addr_hit[9] = (reg_addr == PAD_CONTROL_PAD_MUX_SPI2_SD_1_OFFSET);
    addr_hit[10] = (reg_addr == PAD_CONTROL_PAD_MUX_SPI2_SD_2_OFFSET);
    addr_hit[11] = (reg_addr == PAD_CONTROL_PAD_MUX_SPI2_SD_3_OFFSET);
    addr_hit[12] = (reg_addr == PAD_CONTROL_PAD_MUX_I2C_SCL_OFFSET);
    addr_hit[13] = (reg_addr == PAD_CONTROL_PAD_MUX_I2C_SDA_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(PAD_CONTROL_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(PAD_CONTROL_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(PAD_CONTROL_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(PAD_CONTROL_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(PAD_CONTROL_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(PAD_CONTROL_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(PAD_CONTROL_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(PAD_CONTROL_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(PAD_CONTROL_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(PAD_CONTROL_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(PAD_CONTROL_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(PAD_CONTROL_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(PAD_CONTROL_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(PAD_CONTROL_PERMIT[13] & ~reg_be)))));
  end

  assign pad_mux_pdm2pcm_pdm_we = addr_hit[0] & reg_we & !reg_error;
  assign pad_mux_pdm2pcm_pdm_wd = reg_wdata[0];

  assign pad_mux_pdm2pcm_clk_we = addr_hit[1] & reg_we & !reg_error;
  assign pad_mux_pdm2pcm_clk_wd = reg_wdata[0];

  assign pad_mux_i2s_sck_we = addr_hit[2] & reg_we & !reg_error;
  assign pad_mux_i2s_sck_wd = reg_wdata[0];

  assign pad_mux_i2s_ws_we = addr_hit[3] & reg_we & !reg_error;
  assign pad_mux_i2s_ws_wd = reg_wdata[0];

  assign pad_mux_i2s_sd_we = addr_hit[4] & reg_we & !reg_error;
  assign pad_mux_i2s_sd_wd = reg_wdata[0];

  assign pad_mux_spi2_cs_0_we = addr_hit[5] & reg_we & !reg_error;
  assign pad_mux_spi2_cs_0_wd = reg_wdata[0];

  assign pad_mux_spi2_cs_1_we = addr_hit[6] & reg_we & !reg_error;
  assign pad_mux_spi2_cs_1_wd = reg_wdata[0];

  assign pad_mux_spi2_sck_we = addr_hit[7] & reg_we & !reg_error;
  assign pad_mux_spi2_sck_wd = reg_wdata[0];

  assign pad_mux_spi2_sd_0_we = addr_hit[8] & reg_we & !reg_error;
  assign pad_mux_spi2_sd_0_wd = reg_wdata[0];

  assign pad_mux_spi2_sd_1_we = addr_hit[9] & reg_we & !reg_error;
  assign pad_mux_spi2_sd_1_wd = reg_wdata[0];

  assign pad_mux_spi2_sd_2_we = addr_hit[10] & reg_we & !reg_error;
  assign pad_mux_spi2_sd_2_wd = reg_wdata[0];

  assign pad_mux_spi2_sd_3_we = addr_hit[11] & reg_we & !reg_error;
  assign pad_mux_spi2_sd_3_wd = reg_wdata[0];

  assign pad_mux_i2c_scl_we = addr_hit[12] & reg_we & !reg_error;
  assign pad_mux_i2c_scl_wd = reg_wdata[0];

  assign pad_mux_i2c_sda_we = addr_hit[13] & reg_we & !reg_error;
  assign pad_mux_i2c_sda_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = pad_mux_pdm2pcm_pdm_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = pad_mux_pdm2pcm_clk_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = pad_mux_i2s_sck_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = pad_mux_i2s_ws_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = pad_mux_i2s_sd_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = pad_mux_spi2_cs_0_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = pad_mux_spi2_cs_1_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = pad_mux_spi2_sck_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = pad_mux_spi2_sd_0_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = pad_mux_spi2_sd_1_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = pad_mux_spi2_sd_2_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[0] = pad_mux_spi2_sd_3_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = pad_mux_i2c_scl_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = pad_mux_i2c_sda_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module pad_control_reg_top_intf #(
    parameter  int AW = 6,
    localparam int DW = 32
) (
    input logic clk_i,
    input logic rst_ni,
    REG_BUS.in regbus_slave,
    // To HW
    output pad_control_reg_pkg::pad_control_reg2hw_t reg2hw,  // Write
    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);
  localparam int unsigned STRB_WIDTH = DW / 8;

  `include "register_interface/typedef.svh"
  `include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;

  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)



  pad_control_reg_top #(
      .reg_req_t(reg_bus_req_t),
      .reg_rsp_t(reg_bus_rsp_t),
      .AW(AW)
  ) i_regs (
      .clk_i,
      .rst_ni,
      .reg_req_i(s_reg_req),
      .reg_rsp_o(s_reg_rsp),
      .reg2hw,  // Write
      .devmode_i
  );

endmodule


