// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package pad_control_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 6;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {logic q;} pad_control_reg2hw_pad_mux_pdm2pcm_pdm_reg_t;

  typedef struct packed {logic q;} pad_control_reg2hw_pad_mux_pdm2pcm_clk_reg_t;

  typedef struct packed {logic q;} pad_control_reg2hw_pad_mux_i2s_sck_reg_t;

  typedef struct packed {logic q;} pad_control_reg2hw_pad_mux_i2s_ws_reg_t;

  typedef struct packed {logic q;} pad_control_reg2hw_pad_mux_i2s_sd_reg_t;

  typedef struct packed {logic q;} pad_control_reg2hw_pad_mux_spi2_cs_0_reg_t;

  typedef struct packed {logic q;} pad_control_reg2hw_pad_mux_spi2_cs_1_reg_t;

  typedef struct packed {logic q;} pad_control_reg2hw_pad_mux_spi2_sck_reg_t;

  typedef struct packed {logic q;} pad_control_reg2hw_pad_mux_spi2_sd_0_reg_t;

  typedef struct packed {logic q;} pad_control_reg2hw_pad_mux_spi2_sd_1_reg_t;

  typedef struct packed {logic q;} pad_control_reg2hw_pad_mux_spi2_sd_2_reg_t;

  typedef struct packed {logic q;} pad_control_reg2hw_pad_mux_spi2_sd_3_reg_t;

  typedef struct packed {logic q;} pad_control_reg2hw_pad_mux_i2c_scl_reg_t;

  typedef struct packed {logic q;} pad_control_reg2hw_pad_mux_i2c_sda_reg_t;

  // Register -> HW type
  typedef struct packed {
    pad_control_reg2hw_pad_mux_pdm2pcm_pdm_reg_t pad_mux_pdm2pcm_pdm;  // [13:13]
    pad_control_reg2hw_pad_mux_pdm2pcm_clk_reg_t pad_mux_pdm2pcm_clk;  // [12:12]
    pad_control_reg2hw_pad_mux_i2s_sck_reg_t pad_mux_i2s_sck;  // [11:11]
    pad_control_reg2hw_pad_mux_i2s_ws_reg_t pad_mux_i2s_ws;  // [10:10]
    pad_control_reg2hw_pad_mux_i2s_sd_reg_t pad_mux_i2s_sd;  // [9:9]
    pad_control_reg2hw_pad_mux_spi2_cs_0_reg_t pad_mux_spi2_cs_0;  // [8:8]
    pad_control_reg2hw_pad_mux_spi2_cs_1_reg_t pad_mux_spi2_cs_1;  // [7:7]
    pad_control_reg2hw_pad_mux_spi2_sck_reg_t pad_mux_spi2_sck;  // [6:6]
    pad_control_reg2hw_pad_mux_spi2_sd_0_reg_t pad_mux_spi2_sd_0;  // [5:5]
    pad_control_reg2hw_pad_mux_spi2_sd_1_reg_t pad_mux_spi2_sd_1;  // [4:4]
    pad_control_reg2hw_pad_mux_spi2_sd_2_reg_t pad_mux_spi2_sd_2;  // [3:3]
    pad_control_reg2hw_pad_mux_spi2_sd_3_reg_t pad_mux_spi2_sd_3;  // [2:2]
    pad_control_reg2hw_pad_mux_i2c_scl_reg_t pad_mux_i2c_scl;  // [1:1]
    pad_control_reg2hw_pad_mux_i2c_sda_reg_t pad_mux_i2c_sda;  // [0:0]
  } pad_control_reg2hw_t;

  // Register offsets
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_MUX_PDM2PCM_PDM_OFFSET = 6'h0;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_MUX_PDM2PCM_CLK_OFFSET = 6'h4;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_MUX_I2S_SCK_OFFSET = 6'h8;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_MUX_I2S_WS_OFFSET = 6'hc;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_MUX_I2S_SD_OFFSET = 6'h10;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_MUX_SPI2_CS_0_OFFSET = 6'h14;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_MUX_SPI2_CS_1_OFFSET = 6'h18;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_MUX_SPI2_SCK_OFFSET = 6'h1c;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_MUX_SPI2_SD_0_OFFSET = 6'h20;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_MUX_SPI2_SD_1_OFFSET = 6'h24;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_MUX_SPI2_SD_2_OFFSET = 6'h28;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_MUX_SPI2_SD_3_OFFSET = 6'h2c;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_MUX_I2C_SCL_OFFSET = 6'h30;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_MUX_I2C_SDA_OFFSET = 6'h34;

  // Register index
  typedef enum int {
    PAD_CONTROL_PAD_MUX_PDM2PCM_PDM,
    PAD_CONTROL_PAD_MUX_PDM2PCM_CLK,
    PAD_CONTROL_PAD_MUX_I2S_SCK,
    PAD_CONTROL_PAD_MUX_I2S_WS,
    PAD_CONTROL_PAD_MUX_I2S_SD,
    PAD_CONTROL_PAD_MUX_SPI2_CS_0,
    PAD_CONTROL_PAD_MUX_SPI2_CS_1,
    PAD_CONTROL_PAD_MUX_SPI2_SCK,
    PAD_CONTROL_PAD_MUX_SPI2_SD_0,
    PAD_CONTROL_PAD_MUX_SPI2_SD_1,
    PAD_CONTROL_PAD_MUX_SPI2_SD_2,
    PAD_CONTROL_PAD_MUX_SPI2_SD_3,
    PAD_CONTROL_PAD_MUX_I2C_SCL,
    PAD_CONTROL_PAD_MUX_I2C_SDA
  } pad_control_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] PAD_CONTROL_PERMIT[14] = '{
      4'b0001,  // index[ 0] PAD_CONTROL_PAD_MUX_PDM2PCM_PDM
      4'b0001,  // index[ 1] PAD_CONTROL_PAD_MUX_PDM2PCM_CLK
      4'b0001,  // index[ 2] PAD_CONTROL_PAD_MUX_I2S_SCK
      4'b0001,  // index[ 3] PAD_CONTROL_PAD_MUX_I2S_WS
      4'b0001,  // index[ 4] PAD_CONTROL_PAD_MUX_I2S_SD
      4'b0001,  // index[ 5] PAD_CONTROL_PAD_MUX_SPI2_CS_0
      4'b0001,  // index[ 6] PAD_CONTROL_PAD_MUX_SPI2_CS_1
      4'b0001,  // index[ 7] PAD_CONTROL_PAD_MUX_SPI2_SCK
      4'b0001,  // index[ 8] PAD_CONTROL_PAD_MUX_SPI2_SD_0
      4'b0001,  // index[ 9] PAD_CONTROL_PAD_MUX_SPI2_SD_1
      4'b0001,  // index[10] PAD_CONTROL_PAD_MUX_SPI2_SD_2
      4'b0001,  // index[11] PAD_CONTROL_PAD_MUX_SPI2_SD_3
      4'b0001,  // index[12] PAD_CONTROL_PAD_MUX_I2C_SCL
      4'b0001  // index[13] PAD_CONTROL_PAD_MUX_I2C_SDA
  };

endpackage

